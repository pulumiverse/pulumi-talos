// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machine

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Generate machine configuration for a Talos control plane node.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/siderolabs/pulumi-provider-talos/sdk/go/talos/client"
//	"github.com/siderolabs/pulumi-provider-talos/sdk/go/talos/machine"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			machineSecrets, err := machine.NewSecrets(ctx, "machineSecrets", nil)
//			if err != nil {
//				return err
//			}
//			talosconfig, err := client.NewConfiguration(ctx, "talosconfig", &client.ConfigurationArgs{
//				ClusterName:    pulumi.String("example-cluster"),
//				MachineSecrets: machineSecrets.MachineSecrets,
//				Endpoints: pulumi.StringArray{
//					pulumi.String("10.5.0.2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = machine.NewConfigurationControlplane(ctx, "machineconfigCp", &machine.ConfigurationControlplaneArgs{
//				ClusterName:     talosconfig.ClusterName,
//				ClusterEndpoint: pulumi.String("https://cluster.local:6443"),
//				MachineSecrets:  machineSecrets.MachineSecrets,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConfigurationControlplane struct {
	pulumi.CustomResourceState

	// The endpoint of the Talos cluster
	ClusterEndpoint pulumi.StringOutput `pulumi:"clusterEndpoint"`
	// The name of the cluster in the generated config
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// config patches to apply to the generated config
	ConfigPatches pulumi.StringArrayOutput `pulumi:"configPatches"`
	// the desired machine config version to generate
	ConfigVersion pulumi.StringPtrOutput `pulumi:"configVersion"`
	// whether to render all machine configs adding the documentation for each field
	DocsEnabled pulumi.BoolPtrOutput `pulumi:"docsEnabled"`
	// whether to render all machine configs with the commented examples
	ExamplesEnabled pulumi.BoolPtrOutput `pulumi:"examplesEnabled"`
	// desired kubernetes version to run
	KubernetesVersion pulumi.StringPtrOutput `pulumi:"kubernetesVersion"`
	// the generated control plane config
	MachineConfig pulumi.StringOutput `pulumi:"machineConfig"`
	// The machine secrets for the cluster
	MachineSecrets pulumi.StringOutput `pulumi:"machineSecrets"`
	// The version of Talos for which to generate configs
	TalosVersion pulumi.StringPtrOutput `pulumi:"talosVersion"`
}

// NewConfigurationControlplane registers a new resource with the given unique name, arguments, and options.
func NewConfigurationControlplane(ctx *pulumi.Context,
	name string, args *ConfigurationControlplaneArgs, opts ...pulumi.ResourceOption) (*ConfigurationControlplane, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ClusterEndpoint'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.MachineSecrets == nil {
		return nil, errors.New("invalid value for required argument 'MachineSecrets'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"machineConfig",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource ConfigurationControlplane
	err := ctx.RegisterResource("talos:machine/configurationControlplane:ConfigurationControlplane", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationControlplane gets an existing ConfigurationControlplane resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationControlplane(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationControlplaneState, opts ...pulumi.ResourceOption) (*ConfigurationControlplane, error) {
	var resource ConfigurationControlplane
	err := ctx.ReadResource("talos:machine/configurationControlplane:ConfigurationControlplane", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationControlplane resources.
type configurationControlplaneState struct {
	// The endpoint of the Talos cluster
	ClusterEndpoint *string `pulumi:"clusterEndpoint"`
	// The name of the cluster in the generated config
	ClusterName *string `pulumi:"clusterName"`
	// config patches to apply to the generated config
	ConfigPatches []string `pulumi:"configPatches"`
	// the desired machine config version to generate
	ConfigVersion *string `pulumi:"configVersion"`
	// whether to render all machine configs adding the documentation for each field
	DocsEnabled *bool `pulumi:"docsEnabled"`
	// whether to render all machine configs with the commented examples
	ExamplesEnabled *bool `pulumi:"examplesEnabled"`
	// desired kubernetes version to run
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// the generated control plane config
	MachineConfig *string `pulumi:"machineConfig"`
	// The machine secrets for the cluster
	MachineSecrets *string `pulumi:"machineSecrets"`
	// The version of Talos for which to generate configs
	TalosVersion *string `pulumi:"talosVersion"`
}

type ConfigurationControlplaneState struct {
	// The endpoint of the Talos cluster
	ClusterEndpoint pulumi.StringPtrInput
	// The name of the cluster in the generated config
	ClusterName pulumi.StringPtrInput
	// config patches to apply to the generated config
	ConfigPatches pulumi.StringArrayInput
	// the desired machine config version to generate
	ConfigVersion pulumi.StringPtrInput
	// whether to render all machine configs adding the documentation for each field
	DocsEnabled pulumi.BoolPtrInput
	// whether to render all machine configs with the commented examples
	ExamplesEnabled pulumi.BoolPtrInput
	// desired kubernetes version to run
	KubernetesVersion pulumi.StringPtrInput
	// the generated control plane config
	MachineConfig pulumi.StringPtrInput
	// The machine secrets for the cluster
	MachineSecrets pulumi.StringPtrInput
	// The version of Talos for which to generate configs
	TalosVersion pulumi.StringPtrInput
}

func (ConfigurationControlplaneState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationControlplaneState)(nil)).Elem()
}

type configurationControlplaneArgs struct {
	// The endpoint of the Talos cluster
	ClusterEndpoint string `pulumi:"clusterEndpoint"`
	// The name of the cluster in the generated config
	ClusterName string `pulumi:"clusterName"`
	// config patches to apply to the generated config
	ConfigPatches []string `pulumi:"configPatches"`
	// the desired machine config version to generate
	ConfigVersion *string `pulumi:"configVersion"`
	// whether to render all machine configs adding the documentation for each field
	DocsEnabled *bool `pulumi:"docsEnabled"`
	// whether to render all machine configs with the commented examples
	ExamplesEnabled *bool `pulumi:"examplesEnabled"`
	// desired kubernetes version to run
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// The machine secrets for the cluster
	MachineSecrets string `pulumi:"machineSecrets"`
	// The version of Talos for which to generate configs
	TalosVersion *string `pulumi:"talosVersion"`
}

// The set of arguments for constructing a ConfigurationControlplane resource.
type ConfigurationControlplaneArgs struct {
	// The endpoint of the Talos cluster
	ClusterEndpoint pulumi.StringInput
	// The name of the cluster in the generated config
	ClusterName pulumi.StringInput
	// config patches to apply to the generated config
	ConfigPatches pulumi.StringArrayInput
	// the desired machine config version to generate
	ConfigVersion pulumi.StringPtrInput
	// whether to render all machine configs adding the documentation for each field
	DocsEnabled pulumi.BoolPtrInput
	// whether to render all machine configs with the commented examples
	ExamplesEnabled pulumi.BoolPtrInput
	// desired kubernetes version to run
	KubernetesVersion pulumi.StringPtrInput
	// The machine secrets for the cluster
	MachineSecrets pulumi.StringInput
	// The version of Talos for which to generate configs
	TalosVersion pulumi.StringPtrInput
}

func (ConfigurationControlplaneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationControlplaneArgs)(nil)).Elem()
}

type ConfigurationControlplaneInput interface {
	pulumi.Input

	ToConfigurationControlplaneOutput() ConfigurationControlplaneOutput
	ToConfigurationControlplaneOutputWithContext(ctx context.Context) ConfigurationControlplaneOutput
}

func (*ConfigurationControlplane) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationControlplane)(nil)).Elem()
}

func (i *ConfigurationControlplane) ToConfigurationControlplaneOutput() ConfigurationControlplaneOutput {
	return i.ToConfigurationControlplaneOutputWithContext(context.Background())
}

func (i *ConfigurationControlplane) ToConfigurationControlplaneOutputWithContext(ctx context.Context) ConfigurationControlplaneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationControlplaneOutput)
}

// ConfigurationControlplaneArrayInput is an input type that accepts ConfigurationControlplaneArray and ConfigurationControlplaneArrayOutput values.
// You can construct a concrete instance of `ConfigurationControlplaneArrayInput` via:
//
//	ConfigurationControlplaneArray{ ConfigurationControlplaneArgs{...} }
type ConfigurationControlplaneArrayInput interface {
	pulumi.Input

	ToConfigurationControlplaneArrayOutput() ConfigurationControlplaneArrayOutput
	ToConfigurationControlplaneArrayOutputWithContext(context.Context) ConfigurationControlplaneArrayOutput
}

type ConfigurationControlplaneArray []ConfigurationControlplaneInput

func (ConfigurationControlplaneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationControlplane)(nil)).Elem()
}

func (i ConfigurationControlplaneArray) ToConfigurationControlplaneArrayOutput() ConfigurationControlplaneArrayOutput {
	return i.ToConfigurationControlplaneArrayOutputWithContext(context.Background())
}

func (i ConfigurationControlplaneArray) ToConfigurationControlplaneArrayOutputWithContext(ctx context.Context) ConfigurationControlplaneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationControlplaneArrayOutput)
}

// ConfigurationControlplaneMapInput is an input type that accepts ConfigurationControlplaneMap and ConfigurationControlplaneMapOutput values.
// You can construct a concrete instance of `ConfigurationControlplaneMapInput` via:
//
//	ConfigurationControlplaneMap{ "key": ConfigurationControlplaneArgs{...} }
type ConfigurationControlplaneMapInput interface {
	pulumi.Input

	ToConfigurationControlplaneMapOutput() ConfigurationControlplaneMapOutput
	ToConfigurationControlplaneMapOutputWithContext(context.Context) ConfigurationControlplaneMapOutput
}

type ConfigurationControlplaneMap map[string]ConfigurationControlplaneInput

func (ConfigurationControlplaneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationControlplane)(nil)).Elem()
}

func (i ConfigurationControlplaneMap) ToConfigurationControlplaneMapOutput() ConfigurationControlplaneMapOutput {
	return i.ToConfigurationControlplaneMapOutputWithContext(context.Background())
}

func (i ConfigurationControlplaneMap) ToConfigurationControlplaneMapOutputWithContext(ctx context.Context) ConfigurationControlplaneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationControlplaneMapOutput)
}

type ConfigurationControlplaneOutput struct{ *pulumi.OutputState }

func (ConfigurationControlplaneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationControlplane)(nil)).Elem()
}

func (o ConfigurationControlplaneOutput) ToConfigurationControlplaneOutput() ConfigurationControlplaneOutput {
	return o
}

func (o ConfigurationControlplaneOutput) ToConfigurationControlplaneOutputWithContext(ctx context.Context) ConfigurationControlplaneOutput {
	return o
}

// The endpoint of the Talos cluster
func (o ConfigurationControlplaneOutput) ClusterEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.StringOutput { return v.ClusterEndpoint }).(pulumi.StringOutput)
}

// The name of the cluster in the generated config
func (o ConfigurationControlplaneOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// config patches to apply to the generated config
func (o ConfigurationControlplaneOutput) ConfigPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.StringArrayOutput { return v.ConfigPatches }).(pulumi.StringArrayOutput)
}

// the desired machine config version to generate
func (o ConfigurationControlplaneOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.StringPtrOutput { return v.ConfigVersion }).(pulumi.StringPtrOutput)
}

// whether to render all machine configs adding the documentation for each field
func (o ConfigurationControlplaneOutput) DocsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.BoolPtrOutput { return v.DocsEnabled }).(pulumi.BoolPtrOutput)
}

// whether to render all machine configs with the commented examples
func (o ConfigurationControlplaneOutput) ExamplesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.BoolPtrOutput { return v.ExamplesEnabled }).(pulumi.BoolPtrOutput)
}

// desired kubernetes version to run
func (o ConfigurationControlplaneOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.StringPtrOutput { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// the generated control plane config
func (o ConfigurationControlplaneOutput) MachineConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.StringOutput { return v.MachineConfig }).(pulumi.StringOutput)
}

// The machine secrets for the cluster
func (o ConfigurationControlplaneOutput) MachineSecrets() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.StringOutput { return v.MachineSecrets }).(pulumi.StringOutput)
}

// The version of Talos for which to generate configs
func (o ConfigurationControlplaneOutput) TalosVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationControlplane) pulumi.StringPtrOutput { return v.TalosVersion }).(pulumi.StringPtrOutput)
}

type ConfigurationControlplaneArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationControlplaneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationControlplane)(nil)).Elem()
}

func (o ConfigurationControlplaneArrayOutput) ToConfigurationControlplaneArrayOutput() ConfigurationControlplaneArrayOutput {
	return o
}

func (o ConfigurationControlplaneArrayOutput) ToConfigurationControlplaneArrayOutputWithContext(ctx context.Context) ConfigurationControlplaneArrayOutput {
	return o
}

func (o ConfigurationControlplaneArrayOutput) Index(i pulumi.IntInput) ConfigurationControlplaneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigurationControlplane {
		return vs[0].([]*ConfigurationControlplane)[vs[1].(int)]
	}).(ConfigurationControlplaneOutput)
}

type ConfigurationControlplaneMapOutput struct{ *pulumi.OutputState }

func (ConfigurationControlplaneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationControlplane)(nil)).Elem()
}

func (o ConfigurationControlplaneMapOutput) ToConfigurationControlplaneMapOutput() ConfigurationControlplaneMapOutput {
	return o
}

func (o ConfigurationControlplaneMapOutput) ToConfigurationControlplaneMapOutputWithContext(ctx context.Context) ConfigurationControlplaneMapOutput {
	return o
}

func (o ConfigurationControlplaneMapOutput) MapIndex(k pulumi.StringInput) ConfigurationControlplaneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigurationControlplane {
		return vs[0].(map[string]*ConfigurationControlplane)[vs[1].(string)]
	}).(ConfigurationControlplaneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationControlplaneInput)(nil)).Elem(), &ConfigurationControlplane{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationControlplaneArrayInput)(nil)).Elem(), ConfigurationControlplaneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationControlplaneMapInput)(nil)).Elem(), ConfigurationControlplaneMap{})
	pulumi.RegisterOutputType(ConfigurationControlplaneOutput{})
	pulumi.RegisterOutputType(ConfigurationControlplaneArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationControlplaneMapOutput{})
}
