// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machine

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/internal"
)

// The machine configuration apply resource allows to apply machine configuration to a node
type ConfigurationApply struct {
	pulumi.CustomResourceState

	// The mode of the apply operation
	ApplyMode pulumi.StringOutput `pulumi:"applyMode"`
	// The client configuration data
	ClientConfiguration ClientConfigurationOutput `pulumi:"clientConfiguration"`
	// The list of config patches to apply
	ConfigPatches pulumi.StringArrayOutput `pulumi:"configPatches"`
	// The endpoint of the machine to bootstrap
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// The generated machine configuration after applying patches
	MachineConfiguration pulumi.StringOutput `pulumi:"machineConfiguration"`
	// The machine configuration to apply
	MachineConfigurationInput pulumi.StringOutput `pulumi:"machineConfigurationInput"`
	// The name of the node to bootstrap
	Node pulumi.StringOutput `pulumi:"node"`
	// Actions to be taken on destroy, if *reset* is not set this is a no-op.
	OnDestroy ConfigurationApplyOnDestroyPtrOutput `pulumi:"onDestroy"`
	Timeouts  TimeoutPtrOutput                     `pulumi:"timeouts"`
}

// NewConfigurationApply registers a new resource with the given unique name, arguments, and options.
func NewConfigurationApply(ctx *pulumi.Context,
	name string, args *ConfigurationApplyArgs, opts ...pulumi.ResourceOption) (*ConfigurationApply, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'ClientConfiguration'")
	}
	if args.MachineConfigurationInput == nil {
		return nil, errors.New("invalid value for required argument 'MachineConfigurationInput'")
	}
	if args.Node == nil {
		return nil, errors.New("invalid value for required argument 'Node'")
	}
	if args.MachineConfigurationInput != nil {
		args.MachineConfigurationInput = pulumi.ToSecret(args.MachineConfigurationInput).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"machineConfiguration",
		"machineConfigurationInput",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigurationApply
	err := ctx.RegisterResource("talos:machine/configurationApply:ConfigurationApply", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationApply gets an existing ConfigurationApply resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationApply(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationApplyState, opts ...pulumi.ResourceOption) (*ConfigurationApply, error) {
	var resource ConfigurationApply
	err := ctx.ReadResource("talos:machine/configurationApply:ConfigurationApply", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationApply resources.
type configurationApplyState struct {
	// The mode of the apply operation
	ApplyMode *string `pulumi:"applyMode"`
	// The client configuration data
	ClientConfiguration *ClientConfiguration `pulumi:"clientConfiguration"`
	// The list of config patches to apply
	ConfigPatches []string `pulumi:"configPatches"`
	// The endpoint of the machine to bootstrap
	Endpoint *string `pulumi:"endpoint"`
	// The generated machine configuration after applying patches
	MachineConfiguration *string `pulumi:"machineConfiguration"`
	// The machine configuration to apply
	MachineConfigurationInput *string `pulumi:"machineConfigurationInput"`
	// The name of the node to bootstrap
	Node *string `pulumi:"node"`
	// Actions to be taken on destroy, if *reset* is not set this is a no-op.
	OnDestroy *ConfigurationApplyOnDestroy `pulumi:"onDestroy"`
	Timeouts  *Timeout                     `pulumi:"timeouts"`
}

type ConfigurationApplyState struct {
	// The mode of the apply operation
	ApplyMode pulumi.StringPtrInput
	// The client configuration data
	ClientConfiguration ClientConfigurationPtrInput
	// The list of config patches to apply
	ConfigPatches pulumi.StringArrayInput
	// The endpoint of the machine to bootstrap
	Endpoint pulumi.StringPtrInput
	// The generated machine configuration after applying patches
	MachineConfiguration pulumi.StringPtrInput
	// The machine configuration to apply
	MachineConfigurationInput pulumi.StringPtrInput
	// The name of the node to bootstrap
	Node pulumi.StringPtrInput
	// Actions to be taken on destroy, if *reset* is not set this is a no-op.
	OnDestroy ConfigurationApplyOnDestroyPtrInput
	Timeouts  TimeoutPtrInput
}

func (ConfigurationApplyState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationApplyState)(nil)).Elem()
}

type configurationApplyArgs struct {
	// The mode of the apply operation
	ApplyMode *string `pulumi:"applyMode"`
	// The client configuration data
	ClientConfiguration ClientConfiguration `pulumi:"clientConfiguration"`
	// The list of config patches to apply
	ConfigPatches []string `pulumi:"configPatches"`
	// The endpoint of the machine to bootstrap
	Endpoint *string `pulumi:"endpoint"`
	// The machine configuration to apply
	MachineConfigurationInput string `pulumi:"machineConfigurationInput"`
	// The name of the node to bootstrap
	Node string `pulumi:"node"`
	// Actions to be taken on destroy, if *reset* is not set this is a no-op.
	OnDestroy *ConfigurationApplyOnDestroy `pulumi:"onDestroy"`
	Timeouts  *Timeout                     `pulumi:"timeouts"`
}

// The set of arguments for constructing a ConfigurationApply resource.
type ConfigurationApplyArgs struct {
	// The mode of the apply operation
	ApplyMode pulumi.StringPtrInput
	// The client configuration data
	ClientConfiguration ClientConfigurationInput
	// The list of config patches to apply
	ConfigPatches pulumi.StringArrayInput
	// The endpoint of the machine to bootstrap
	Endpoint pulumi.StringPtrInput
	// The machine configuration to apply
	MachineConfigurationInput pulumi.StringInput
	// The name of the node to bootstrap
	Node pulumi.StringInput
	// Actions to be taken on destroy, if *reset* is not set this is a no-op.
	OnDestroy ConfigurationApplyOnDestroyPtrInput
	Timeouts  TimeoutPtrInput
}

func (ConfigurationApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationApplyArgs)(nil)).Elem()
}

type ConfigurationApplyInput interface {
	pulumi.Input

	ToConfigurationApplyOutput() ConfigurationApplyOutput
	ToConfigurationApplyOutputWithContext(ctx context.Context) ConfigurationApplyOutput
}

func (*ConfigurationApply) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationApply)(nil)).Elem()
}

func (i *ConfigurationApply) ToConfigurationApplyOutput() ConfigurationApplyOutput {
	return i.ToConfigurationApplyOutputWithContext(context.Background())
}

func (i *ConfigurationApply) ToConfigurationApplyOutputWithContext(ctx context.Context) ConfigurationApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationApplyOutput)
}

// ConfigurationApplyArrayInput is an input type that accepts ConfigurationApplyArray and ConfigurationApplyArrayOutput values.
// You can construct a concrete instance of `ConfigurationApplyArrayInput` via:
//
//	ConfigurationApplyArray{ ConfigurationApplyArgs{...} }
type ConfigurationApplyArrayInput interface {
	pulumi.Input

	ToConfigurationApplyArrayOutput() ConfigurationApplyArrayOutput
	ToConfigurationApplyArrayOutputWithContext(context.Context) ConfigurationApplyArrayOutput
}

type ConfigurationApplyArray []ConfigurationApplyInput

func (ConfigurationApplyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationApply)(nil)).Elem()
}

func (i ConfigurationApplyArray) ToConfigurationApplyArrayOutput() ConfigurationApplyArrayOutput {
	return i.ToConfigurationApplyArrayOutputWithContext(context.Background())
}

func (i ConfigurationApplyArray) ToConfigurationApplyArrayOutputWithContext(ctx context.Context) ConfigurationApplyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationApplyArrayOutput)
}

// ConfigurationApplyMapInput is an input type that accepts ConfigurationApplyMap and ConfigurationApplyMapOutput values.
// You can construct a concrete instance of `ConfigurationApplyMapInput` via:
//
//	ConfigurationApplyMap{ "key": ConfigurationApplyArgs{...} }
type ConfigurationApplyMapInput interface {
	pulumi.Input

	ToConfigurationApplyMapOutput() ConfigurationApplyMapOutput
	ToConfigurationApplyMapOutputWithContext(context.Context) ConfigurationApplyMapOutput
}

type ConfigurationApplyMap map[string]ConfigurationApplyInput

func (ConfigurationApplyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationApply)(nil)).Elem()
}

func (i ConfigurationApplyMap) ToConfigurationApplyMapOutput() ConfigurationApplyMapOutput {
	return i.ToConfigurationApplyMapOutputWithContext(context.Background())
}

func (i ConfigurationApplyMap) ToConfigurationApplyMapOutputWithContext(ctx context.Context) ConfigurationApplyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationApplyMapOutput)
}

type ConfigurationApplyOutput struct{ *pulumi.OutputState }

func (ConfigurationApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationApply)(nil)).Elem()
}

func (o ConfigurationApplyOutput) ToConfigurationApplyOutput() ConfigurationApplyOutput {
	return o
}

func (o ConfigurationApplyOutput) ToConfigurationApplyOutputWithContext(ctx context.Context) ConfigurationApplyOutput {
	return o
}

// The mode of the apply operation
func (o ConfigurationApplyOutput) ApplyMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.ApplyMode }).(pulumi.StringOutput)
}

// The client configuration data
func (o ConfigurationApplyOutput) ClientConfiguration() ClientConfigurationOutput {
	return o.ApplyT(func(v *ConfigurationApply) ClientConfigurationOutput { return v.ClientConfiguration }).(ClientConfigurationOutput)
}

// The list of config patches to apply
func (o ConfigurationApplyOutput) ConfigPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringArrayOutput { return v.ConfigPatches }).(pulumi.StringArrayOutput)
}

// The endpoint of the machine to bootstrap
func (o ConfigurationApplyOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// The generated machine configuration after applying patches
func (o ConfigurationApplyOutput) MachineConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.MachineConfiguration }).(pulumi.StringOutput)
}

// The machine configuration to apply
func (o ConfigurationApplyOutput) MachineConfigurationInput() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.MachineConfigurationInput }).(pulumi.StringOutput)
}

// The name of the node to bootstrap
func (o ConfigurationApplyOutput) Node() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.Node }).(pulumi.StringOutput)
}

// Actions to be taken on destroy, if *reset* is not set this is a no-op.
func (o ConfigurationApplyOutput) OnDestroy() ConfigurationApplyOnDestroyPtrOutput {
	return o.ApplyT(func(v *ConfigurationApply) ConfigurationApplyOnDestroyPtrOutput { return v.OnDestroy }).(ConfigurationApplyOnDestroyPtrOutput)
}

func (o ConfigurationApplyOutput) Timeouts() TimeoutPtrOutput {
	return o.ApplyT(func(v *ConfigurationApply) TimeoutPtrOutput { return v.Timeouts }).(TimeoutPtrOutput)
}

type ConfigurationApplyArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationApplyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationApply)(nil)).Elem()
}

func (o ConfigurationApplyArrayOutput) ToConfigurationApplyArrayOutput() ConfigurationApplyArrayOutput {
	return o
}

func (o ConfigurationApplyArrayOutput) ToConfigurationApplyArrayOutputWithContext(ctx context.Context) ConfigurationApplyArrayOutput {
	return o
}

func (o ConfigurationApplyArrayOutput) Index(i pulumi.IntInput) ConfigurationApplyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigurationApply {
		return vs[0].([]*ConfigurationApply)[vs[1].(int)]
	}).(ConfigurationApplyOutput)
}

type ConfigurationApplyMapOutput struct{ *pulumi.OutputState }

func (ConfigurationApplyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationApply)(nil)).Elem()
}

func (o ConfigurationApplyMapOutput) ToConfigurationApplyMapOutput() ConfigurationApplyMapOutput {
	return o
}

func (o ConfigurationApplyMapOutput) ToConfigurationApplyMapOutputWithContext(ctx context.Context) ConfigurationApplyMapOutput {
	return o
}

func (o ConfigurationApplyMapOutput) MapIndex(k pulumi.StringInput) ConfigurationApplyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigurationApply {
		return vs[0].(map[string]*ConfigurationApply)[vs[1].(string)]
	}).(ConfigurationApplyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationApplyInput)(nil)).Elem(), &ConfigurationApply{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationApplyArrayInput)(nil)).Elem(), ConfigurationApplyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationApplyMapInput)(nil)).Elem(), ConfigurationApplyMap{})
	pulumi.RegisterOutputType(ConfigurationApplyOutput{})
	pulumi.RegisterOutputType(ConfigurationApplyArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationApplyMapOutput{})
}
