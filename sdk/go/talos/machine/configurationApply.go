// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machine

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Applies machine configuration to a Talos node.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//	"io/ioutil"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/siderolabs/pulumi-provider-talos/sdk/go/talos/client"
//	"github.com/siderolabs/pulumi-provider-talos/sdk/go/talos/machine"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := ioutil.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			machineSecrets, err := machine.NewSecrets(ctx, "machineSecrets", nil)
//			if err != nil {
//				return err
//			}
//			talosconfig, err := client.NewConfiguration(ctx, "talosconfig", &client.ConfigurationArgs{
//				ClusterName:    pulumi.String("example-cluster"),
//				MachineSecrets: machineSecrets.MachineSecrets,
//				Endpoints: pulumi.StringArray{
//					pulumi.String("10.5.0.2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			machineconfigCp, err := machine.NewConfigurationControlplane(ctx, "machineconfigCp", &machine.ConfigurationControlplaneArgs{
//				ClusterName:     talosconfig.ClusterName,
//				ClusterEndpoint: pulumi.String("https://cluster.local:6443"),
//				MachineSecrets:  machineSecrets.MachineSecrets,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = machine.NewConfigurationApply(ctx, "configApply", &machine.ConfigurationApplyArgs{
//				TalosConfig:          talosconfig.TalosConfig,
//				MachineConfiguration: machineconfigCp.MachineConfig,
//				ConfigPatches: pulumi.StringArray{
//					readFileOrPanic(fmt.Sprintf("%v/files/worker.yaml", path.Module)),
//				},
//				Endpoint: pulumi.String("10.5.0.2"),
//				Node:     pulumi.String("10.5.0.2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConfigurationApply struct {
	pulumi.CustomResourceState

	// config patches to apply to the generated config
	ConfigPatches pulumi.StringArrayOutput `pulumi:"configPatches"`
	// machine endpoint
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// machine configuration
	MachineConfiguration pulumi.StringOutput `pulumi:"machineConfiguration"`
	// The mode to apply the configuration in.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// node to apply the config against
	Node pulumi.StringOutput `pulumi:"node"`
	// talos client configuration for authentication
	TalosConfig pulumi.StringOutput `pulumi:"talosConfig"`
}

// NewConfigurationApply registers a new resource with the given unique name, arguments, and options.
func NewConfigurationApply(ctx *pulumi.Context,
	name string, args *ConfigurationApplyArgs, opts ...pulumi.ResourceOption) (*ConfigurationApply, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.MachineConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'MachineConfiguration'")
	}
	if args.Node == nil {
		return nil, errors.New("invalid value for required argument 'Node'")
	}
	if args.TalosConfig == nil {
		return nil, errors.New("invalid value for required argument 'TalosConfig'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConfigurationApply
	err := ctx.RegisterResource("talos:machine/configurationApply:ConfigurationApply", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationApply gets an existing ConfigurationApply resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationApply(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationApplyState, opts ...pulumi.ResourceOption) (*ConfigurationApply, error) {
	var resource ConfigurationApply
	err := ctx.ReadResource("talos:machine/configurationApply:ConfigurationApply", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationApply resources.
type configurationApplyState struct {
	// config patches to apply to the generated config
	ConfigPatches []string `pulumi:"configPatches"`
	// machine endpoint
	Endpoint *string `pulumi:"endpoint"`
	// machine configuration
	MachineConfiguration *string `pulumi:"machineConfiguration"`
	// The mode to apply the configuration in.
	Mode *string `pulumi:"mode"`
	// node to apply the config against
	Node *string `pulumi:"node"`
	// talos client configuration for authentication
	TalosConfig *string `pulumi:"talosConfig"`
}

type ConfigurationApplyState struct {
	// config patches to apply to the generated config
	ConfigPatches pulumi.StringArrayInput
	// machine endpoint
	Endpoint pulumi.StringPtrInput
	// machine configuration
	MachineConfiguration pulumi.StringPtrInput
	// The mode to apply the configuration in.
	Mode pulumi.StringPtrInput
	// node to apply the config against
	Node pulumi.StringPtrInput
	// talos client configuration for authentication
	TalosConfig pulumi.StringPtrInput
}

func (ConfigurationApplyState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationApplyState)(nil)).Elem()
}

type configurationApplyArgs struct {
	// config patches to apply to the generated config
	ConfigPatches []string `pulumi:"configPatches"`
	// machine endpoint
	Endpoint string `pulumi:"endpoint"`
	// machine configuration
	MachineConfiguration string `pulumi:"machineConfiguration"`
	// The mode to apply the configuration in.
	Mode *string `pulumi:"mode"`
	// node to apply the config against
	Node string `pulumi:"node"`
	// talos client configuration for authentication
	TalosConfig string `pulumi:"talosConfig"`
}

// The set of arguments for constructing a ConfigurationApply resource.
type ConfigurationApplyArgs struct {
	// config patches to apply to the generated config
	ConfigPatches pulumi.StringArrayInput
	// machine endpoint
	Endpoint pulumi.StringInput
	// machine configuration
	MachineConfiguration pulumi.StringInput
	// The mode to apply the configuration in.
	Mode pulumi.StringPtrInput
	// node to apply the config against
	Node pulumi.StringInput
	// talos client configuration for authentication
	TalosConfig pulumi.StringInput
}

func (ConfigurationApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationApplyArgs)(nil)).Elem()
}

type ConfigurationApplyInput interface {
	pulumi.Input

	ToConfigurationApplyOutput() ConfigurationApplyOutput
	ToConfigurationApplyOutputWithContext(ctx context.Context) ConfigurationApplyOutput
}

func (*ConfigurationApply) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationApply)(nil)).Elem()
}

func (i *ConfigurationApply) ToConfigurationApplyOutput() ConfigurationApplyOutput {
	return i.ToConfigurationApplyOutputWithContext(context.Background())
}

func (i *ConfigurationApply) ToConfigurationApplyOutputWithContext(ctx context.Context) ConfigurationApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationApplyOutput)
}

// ConfigurationApplyArrayInput is an input type that accepts ConfigurationApplyArray and ConfigurationApplyArrayOutput values.
// You can construct a concrete instance of `ConfigurationApplyArrayInput` via:
//
//	ConfigurationApplyArray{ ConfigurationApplyArgs{...} }
type ConfigurationApplyArrayInput interface {
	pulumi.Input

	ToConfigurationApplyArrayOutput() ConfigurationApplyArrayOutput
	ToConfigurationApplyArrayOutputWithContext(context.Context) ConfigurationApplyArrayOutput
}

type ConfigurationApplyArray []ConfigurationApplyInput

func (ConfigurationApplyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationApply)(nil)).Elem()
}

func (i ConfigurationApplyArray) ToConfigurationApplyArrayOutput() ConfigurationApplyArrayOutput {
	return i.ToConfigurationApplyArrayOutputWithContext(context.Background())
}

func (i ConfigurationApplyArray) ToConfigurationApplyArrayOutputWithContext(ctx context.Context) ConfigurationApplyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationApplyArrayOutput)
}

// ConfigurationApplyMapInput is an input type that accepts ConfigurationApplyMap and ConfigurationApplyMapOutput values.
// You can construct a concrete instance of `ConfigurationApplyMapInput` via:
//
//	ConfigurationApplyMap{ "key": ConfigurationApplyArgs{...} }
type ConfigurationApplyMapInput interface {
	pulumi.Input

	ToConfigurationApplyMapOutput() ConfigurationApplyMapOutput
	ToConfigurationApplyMapOutputWithContext(context.Context) ConfigurationApplyMapOutput
}

type ConfigurationApplyMap map[string]ConfigurationApplyInput

func (ConfigurationApplyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationApply)(nil)).Elem()
}

func (i ConfigurationApplyMap) ToConfigurationApplyMapOutput() ConfigurationApplyMapOutput {
	return i.ToConfigurationApplyMapOutputWithContext(context.Background())
}

func (i ConfigurationApplyMap) ToConfigurationApplyMapOutputWithContext(ctx context.Context) ConfigurationApplyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationApplyMapOutput)
}

type ConfigurationApplyOutput struct{ *pulumi.OutputState }

func (ConfigurationApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationApply)(nil)).Elem()
}

func (o ConfigurationApplyOutput) ToConfigurationApplyOutput() ConfigurationApplyOutput {
	return o
}

func (o ConfigurationApplyOutput) ToConfigurationApplyOutputWithContext(ctx context.Context) ConfigurationApplyOutput {
	return o
}

// config patches to apply to the generated config
func (o ConfigurationApplyOutput) ConfigPatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringArrayOutput { return v.ConfigPatches }).(pulumi.StringArrayOutput)
}

// machine endpoint
func (o ConfigurationApplyOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// machine configuration
func (o ConfigurationApplyOutput) MachineConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.MachineConfiguration }).(pulumi.StringOutput)
}

// The mode to apply the configuration in.
func (o ConfigurationApplyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// node to apply the config against
func (o ConfigurationApplyOutput) Node() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.Node }).(pulumi.StringOutput)
}

// talos client configuration for authentication
func (o ConfigurationApplyOutput) TalosConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationApply) pulumi.StringOutput { return v.TalosConfig }).(pulumi.StringOutput)
}

type ConfigurationApplyArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationApplyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationApply)(nil)).Elem()
}

func (o ConfigurationApplyArrayOutput) ToConfigurationApplyArrayOutput() ConfigurationApplyArrayOutput {
	return o
}

func (o ConfigurationApplyArrayOutput) ToConfigurationApplyArrayOutputWithContext(ctx context.Context) ConfigurationApplyArrayOutput {
	return o
}

func (o ConfigurationApplyArrayOutput) Index(i pulumi.IntInput) ConfigurationApplyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigurationApply {
		return vs[0].([]*ConfigurationApply)[vs[1].(int)]
	}).(ConfigurationApplyOutput)
}

type ConfigurationApplyMapOutput struct{ *pulumi.OutputState }

func (ConfigurationApplyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationApply)(nil)).Elem()
}

func (o ConfigurationApplyMapOutput) ToConfigurationApplyMapOutput() ConfigurationApplyMapOutput {
	return o
}

func (o ConfigurationApplyMapOutput) ToConfigurationApplyMapOutputWithContext(ctx context.Context) ConfigurationApplyMapOutput {
	return o
}

func (o ConfigurationApplyMapOutput) MapIndex(k pulumi.StringInput) ConfigurationApplyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigurationApply {
		return vs[0].(map[string]*ConfigurationApply)[vs[1].(string)]
	}).(ConfigurationApplyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationApplyInput)(nil)).Elem(), &ConfigurationApply{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationApplyArrayInput)(nil)).Elem(), ConfigurationApplyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationApplyMapInput)(nil)).Elem(), ConfigurationApplyMap{})
	pulumi.RegisterOutputType(ConfigurationApplyOutput{})
	pulumi.RegisterOutputType(ConfigurationApplyArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationApplyMapOutput{})
}
