// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machine

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Generate machine secrets for a Talos cluster
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/siderolabs/pulumi-provider-talos/sdk/go/talos/machine"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := machine.NewSecrets(ctx, "machineSecrets", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Secrets struct {
	pulumi.CustomResourceState

	// The generated talos cluster secrets
	MachineSecrets pulumi.StringOutput `pulumi:"machineSecrets"`
	// The version of Talos for which to generate secrets
	TalosVersion pulumi.StringPtrOutput `pulumi:"talosVersion"`
}

// NewSecrets registers a new resource with the given unique name, arguments, and options.
func NewSecrets(ctx *pulumi.Context,
	name string, args *SecretsArgs, opts ...pulumi.ResourceOption) (*Secrets, error) {
	if args == nil {
		args = &SecretsArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"machineSecrets",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource Secrets
	err := ctx.RegisterResource("talos:machine/secrets:Secrets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecrets gets an existing Secrets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecrets(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretsState, opts ...pulumi.ResourceOption) (*Secrets, error) {
	var resource Secrets
	err := ctx.ReadResource("talos:machine/secrets:Secrets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secrets resources.
type secretsState struct {
	// The generated talos cluster secrets
	MachineSecrets *string `pulumi:"machineSecrets"`
	// The version of Talos for which to generate secrets
	TalosVersion *string `pulumi:"talosVersion"`
}

type SecretsState struct {
	// The generated talos cluster secrets
	MachineSecrets pulumi.StringPtrInput
	// The version of Talos for which to generate secrets
	TalosVersion pulumi.StringPtrInput
}

func (SecretsState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsState)(nil)).Elem()
}

type secretsArgs struct {
	// The version of Talos for which to generate secrets
	TalosVersion *string `pulumi:"talosVersion"`
}

// The set of arguments for constructing a Secrets resource.
type SecretsArgs struct {
	// The version of Talos for which to generate secrets
	TalosVersion pulumi.StringPtrInput
}

func (SecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretsArgs)(nil)).Elem()
}

type SecretsInput interface {
	pulumi.Input

	ToSecretsOutput() SecretsOutput
	ToSecretsOutputWithContext(ctx context.Context) SecretsOutput
}

func (*Secrets) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (i *Secrets) ToSecretsOutput() SecretsOutput {
	return i.ToSecretsOutputWithContext(context.Background())
}

func (i *Secrets) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsOutput)
}

// SecretsArrayInput is an input type that accepts SecretsArray and SecretsArrayOutput values.
// You can construct a concrete instance of `SecretsArrayInput` via:
//
//	SecretsArray{ SecretsArgs{...} }
type SecretsArrayInput interface {
	pulumi.Input

	ToSecretsArrayOutput() SecretsArrayOutput
	ToSecretsArrayOutputWithContext(context.Context) SecretsArrayOutput
}

type SecretsArray []SecretsInput

func (SecretsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secrets)(nil)).Elem()
}

func (i SecretsArray) ToSecretsArrayOutput() SecretsArrayOutput {
	return i.ToSecretsArrayOutputWithContext(context.Background())
}

func (i SecretsArray) ToSecretsArrayOutputWithContext(ctx context.Context) SecretsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsArrayOutput)
}

// SecretsMapInput is an input type that accepts SecretsMap and SecretsMapOutput values.
// You can construct a concrete instance of `SecretsMapInput` via:
//
//	SecretsMap{ "key": SecretsArgs{...} }
type SecretsMapInput interface {
	pulumi.Input

	ToSecretsMapOutput() SecretsMapOutput
	ToSecretsMapOutputWithContext(context.Context) SecretsMapOutput
}

type SecretsMap map[string]SecretsInput

func (SecretsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secrets)(nil)).Elem()
}

func (i SecretsMap) ToSecretsMapOutput() SecretsMapOutput {
	return i.ToSecretsMapOutputWithContext(context.Background())
}

func (i SecretsMap) ToSecretsMapOutputWithContext(ctx context.Context) SecretsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsMapOutput)
}

type SecretsOutput struct{ *pulumi.OutputState }

func (SecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (o SecretsOutput) ToSecretsOutput() SecretsOutput {
	return o
}

func (o SecretsOutput) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return o
}

// The generated talos cluster secrets
func (o SecretsOutput) MachineSecrets() pulumi.StringOutput {
	return o.ApplyT(func(v *Secrets) pulumi.StringOutput { return v.MachineSecrets }).(pulumi.StringOutput)
}

// The version of Talos for which to generate secrets
func (o SecretsOutput) TalosVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secrets) pulumi.StringPtrOutput { return v.TalosVersion }).(pulumi.StringPtrOutput)
}

type SecretsArrayOutput struct{ *pulumi.OutputState }

func (SecretsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secrets)(nil)).Elem()
}

func (o SecretsArrayOutput) ToSecretsArrayOutput() SecretsArrayOutput {
	return o
}

func (o SecretsArrayOutput) ToSecretsArrayOutputWithContext(ctx context.Context) SecretsArrayOutput {
	return o
}

func (o SecretsArrayOutput) Index(i pulumi.IntInput) SecretsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Secrets {
		return vs[0].([]*Secrets)[vs[1].(int)]
	}).(SecretsOutput)
}

type SecretsMapOutput struct{ *pulumi.OutputState }

func (SecretsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secrets)(nil)).Elem()
}

func (o SecretsMapOutput) ToSecretsMapOutput() SecretsMapOutput {
	return o
}

func (o SecretsMapOutput) ToSecretsMapOutputWithContext(ctx context.Context) SecretsMapOutput {
	return o
}

func (o SecretsMapOutput) MapIndex(k pulumi.StringInput) SecretsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Secrets {
		return vs[0].(map[string]*Secrets)[vs[1].(string)]
	}).(SecretsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsInput)(nil)).Elem(), &Secrets{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsArrayInput)(nil)).Elem(), SecretsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsMapInput)(nil)).Elem(), SecretsMap{})
	pulumi.RegisterOutputType(SecretsOutput{})
	pulumi.RegisterOutputType(SecretsArrayOutput{})
	pulumi.RegisterOutputType(SecretsMapOutput{})
}
