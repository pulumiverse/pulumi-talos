// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package talos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/internal"
)

// The image factory versions data source provides a list of available talos versions from the image factory.
func GetImageFactoryVersions(ctx *pulumi.Context, args *GetImageFactoryVersionsArgs, opts ...pulumi.InvokeOption) (*GetImageFactoryVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageFactoryVersionsResult
	err := ctx.Invoke("talos:index/getImageFactoryVersions:getImageFactoryVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImageFactoryVersions.
type GetImageFactoryVersionsArgs struct {
	// The filter to apply to the overlays list.
	Filters *GetImageFactoryVersionsFilters `pulumi:"filters"`
}

// A collection of values returned by getImageFactoryVersions.
type GetImageFactoryVersionsResult struct {
	// The filter to apply to the overlays list.
	Filters *GetImageFactoryVersionsFilters `pulumi:"filters"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The list of available talos versions.
	TalosVersions []string `pulumi:"talosVersions"`
}

func GetImageFactoryVersionsOutput(ctx *pulumi.Context, args GetImageFactoryVersionsOutputArgs, opts ...pulumi.InvokeOption) GetImageFactoryVersionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetImageFactoryVersionsResultOutput, error) {
			args := v.(GetImageFactoryVersionsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetImageFactoryVersionsResult
			secret, err := ctx.InvokePackageRaw("talos:index/getImageFactoryVersions:getImageFactoryVersions", args, &rv, "", opts...)
			if err != nil {
				return GetImageFactoryVersionsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetImageFactoryVersionsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetImageFactoryVersionsResultOutput), nil
			}
			return output, nil
		}).(GetImageFactoryVersionsResultOutput)
}

// A collection of arguments for invoking getImageFactoryVersions.
type GetImageFactoryVersionsOutputArgs struct {
	// The filter to apply to the overlays list.
	Filters GetImageFactoryVersionsFiltersPtrInput `pulumi:"filters"`
}

func (GetImageFactoryVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageFactoryVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getImageFactoryVersions.
type GetImageFactoryVersionsResultOutput struct{ *pulumi.OutputState }

func (GetImageFactoryVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageFactoryVersionsResult)(nil)).Elem()
}

func (o GetImageFactoryVersionsResultOutput) ToGetImageFactoryVersionsResultOutput() GetImageFactoryVersionsResultOutput {
	return o
}

func (o GetImageFactoryVersionsResultOutput) ToGetImageFactoryVersionsResultOutputWithContext(ctx context.Context) GetImageFactoryVersionsResultOutput {
	return o
}

// The filter to apply to the overlays list.
func (o GetImageFactoryVersionsResultOutput) Filters() GetImageFactoryVersionsFiltersPtrOutput {
	return o.ApplyT(func(v GetImageFactoryVersionsResult) *GetImageFactoryVersionsFilters { return v.Filters }).(GetImageFactoryVersionsFiltersPtrOutput)
}

// The ID of this resource.
func (o GetImageFactoryVersionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageFactoryVersionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of available talos versions.
func (o GetImageFactoryVersionsResultOutput) TalosVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImageFactoryVersionsResult) []string { return v.TalosVersions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageFactoryVersionsResultOutput{})
}
