// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagefactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/internal"
)

// The image factory schematic resource allows you to create a schematic for a Talos image.
type Schematic struct {
	pulumi.CustomResourceState

	// The schematic yaml respresentation to generate the image.
	Schematic pulumi.StringPtrOutput `pulumi:"schematic"`
}

// NewSchematic registers a new resource with the given unique name, arguments, and options.
func NewSchematic(ctx *pulumi.Context,
	name string, args *SchematicArgs, opts ...pulumi.ResourceOption) (*Schematic, error) {
	if args == nil {
		args = &SchematicArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schematic
	err := ctx.RegisterResource("talos:imageFactory/schematic:Schematic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchematic gets an existing Schematic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchematic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchematicState, opts ...pulumi.ResourceOption) (*Schematic, error) {
	var resource Schematic
	err := ctx.ReadResource("talos:imageFactory/schematic:Schematic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schematic resources.
type schematicState struct {
	// The schematic yaml respresentation to generate the image.
	Schematic *string `pulumi:"schematic"`
}

type SchematicState struct {
	// The schematic yaml respresentation to generate the image.
	Schematic pulumi.StringPtrInput
}

func (SchematicState) ElementType() reflect.Type {
	return reflect.TypeOf((*schematicState)(nil)).Elem()
}

type schematicArgs struct {
	// The schematic yaml respresentation to generate the image.
	Schematic *string `pulumi:"schematic"`
}

// The set of arguments for constructing a Schematic resource.
type SchematicArgs struct {
	// The schematic yaml respresentation to generate the image.
	Schematic pulumi.StringPtrInput
}

func (SchematicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schematicArgs)(nil)).Elem()
}

type SchematicInput interface {
	pulumi.Input

	ToSchematicOutput() SchematicOutput
	ToSchematicOutputWithContext(ctx context.Context) SchematicOutput
}

func (*Schematic) ElementType() reflect.Type {
	return reflect.TypeOf((**Schematic)(nil)).Elem()
}

func (i *Schematic) ToSchematicOutput() SchematicOutput {
	return i.ToSchematicOutputWithContext(context.Background())
}

func (i *Schematic) ToSchematicOutputWithContext(ctx context.Context) SchematicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchematicOutput)
}

// SchematicArrayInput is an input type that accepts SchematicArray and SchematicArrayOutput values.
// You can construct a concrete instance of `SchematicArrayInput` via:
//
//	SchematicArray{ SchematicArgs{...} }
type SchematicArrayInput interface {
	pulumi.Input

	ToSchematicArrayOutput() SchematicArrayOutput
	ToSchematicArrayOutputWithContext(context.Context) SchematicArrayOutput
}

type SchematicArray []SchematicInput

func (SchematicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schematic)(nil)).Elem()
}

func (i SchematicArray) ToSchematicArrayOutput() SchematicArrayOutput {
	return i.ToSchematicArrayOutputWithContext(context.Background())
}

func (i SchematicArray) ToSchematicArrayOutputWithContext(ctx context.Context) SchematicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchematicArrayOutput)
}

// SchematicMapInput is an input type that accepts SchematicMap and SchematicMapOutput values.
// You can construct a concrete instance of `SchematicMapInput` via:
//
//	SchematicMap{ "key": SchematicArgs{...} }
type SchematicMapInput interface {
	pulumi.Input

	ToSchematicMapOutput() SchematicMapOutput
	ToSchematicMapOutputWithContext(context.Context) SchematicMapOutput
}

type SchematicMap map[string]SchematicInput

func (SchematicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schematic)(nil)).Elem()
}

func (i SchematicMap) ToSchematicMapOutput() SchematicMapOutput {
	return i.ToSchematicMapOutputWithContext(context.Background())
}

func (i SchematicMap) ToSchematicMapOutputWithContext(ctx context.Context) SchematicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchematicMapOutput)
}

type SchematicOutput struct{ *pulumi.OutputState }

func (SchematicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schematic)(nil)).Elem()
}

func (o SchematicOutput) ToSchematicOutput() SchematicOutput {
	return o
}

func (o SchematicOutput) ToSchematicOutputWithContext(ctx context.Context) SchematicOutput {
	return o
}

// The schematic yaml respresentation to generate the image.
func (o SchematicOutput) Schematic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schematic) pulumi.StringPtrOutput { return v.Schematic }).(pulumi.StringPtrOutput)
}

type SchematicArrayOutput struct{ *pulumi.OutputState }

func (SchematicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schematic)(nil)).Elem()
}

func (o SchematicArrayOutput) ToSchematicArrayOutput() SchematicArrayOutput {
	return o
}

func (o SchematicArrayOutput) ToSchematicArrayOutputWithContext(ctx context.Context) SchematicArrayOutput {
	return o
}

func (o SchematicArrayOutput) Index(i pulumi.IntInput) SchematicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Schematic {
		return vs[0].([]*Schematic)[vs[1].(int)]
	}).(SchematicOutput)
}

type SchematicMapOutput struct{ *pulumi.OutputState }

func (SchematicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schematic)(nil)).Elem()
}

func (o SchematicMapOutput) ToSchematicMapOutput() SchematicMapOutput {
	return o
}

func (o SchematicMapOutput) ToSchematicMapOutputWithContext(ctx context.Context) SchematicMapOutput {
	return o
}

func (o SchematicMapOutput) MapIndex(k pulumi.StringInput) SchematicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Schematic {
		return vs[0].(map[string]*Schematic)[vs[1].(string)]
	}).(SchematicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchematicInput)(nil)).Elem(), &Schematic{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchematicArrayInput)(nil)).Elem(), SchematicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchematicMapInput)(nil)).Elem(), SchematicMap{})
	pulumi.RegisterOutputType(SchematicOutput{})
	pulumi.RegisterOutputType(SchematicArrayOutput{})
	pulumi.RegisterOutputType(SchematicMapOutput{})
}
