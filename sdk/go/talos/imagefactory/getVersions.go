// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package imagefactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/internal"
)

// The image factory versions data source provides a list of available talos versions from the image factory.
func GetVersions(ctx *pulumi.Context, args *GetVersionsArgs, opts ...pulumi.InvokeOption) (*GetVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVersionsResult
	err := ctx.Invoke("talos:imageFactory/getVersions:getVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVersions.
type GetVersionsArgs struct {
	// The filter to apply to the overlays list.
	Filters *GetVersionsFilters `pulumi:"filters"`
}

// A collection of values returned by getVersions.
type GetVersionsResult struct {
	// The filter to apply to the overlays list.
	Filters *GetVersionsFilters `pulumi:"filters"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The list of available talos versions.
	TalosVersions []string `pulumi:"talosVersions"`
}

func GetVersionsOutput(ctx *pulumi.Context, args GetVersionsOutputArgs, opts ...pulumi.InvokeOption) GetVersionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVersionsResultOutput, error) {
			args := v.(GetVersionsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetVersionsResult
			secret, err := ctx.InvokePackageRaw("talos:imageFactory/getVersions:getVersions", args, &rv, "", opts...)
			if err != nil {
				return GetVersionsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetVersionsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetVersionsResultOutput), nil
			}
			return output, nil
		}).(GetVersionsResultOutput)
}

// A collection of arguments for invoking getVersions.
type GetVersionsOutputArgs struct {
	// The filter to apply to the overlays list.
	Filters GetVersionsFiltersPtrInput `pulumi:"filters"`
}

func (GetVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getVersions.
type GetVersionsResultOutput struct{ *pulumi.OutputState }

func (GetVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVersionsResult)(nil)).Elem()
}

func (o GetVersionsResultOutput) ToGetVersionsResultOutput() GetVersionsResultOutput {
	return o
}

func (o GetVersionsResultOutput) ToGetVersionsResultOutputWithContext(ctx context.Context) GetVersionsResultOutput {
	return o
}

// The filter to apply to the overlays list.
func (o GetVersionsResultOutput) Filters() GetVersionsFiltersPtrOutput {
	return o.ApplyT(func(v GetVersionsResult) *GetVersionsFilters { return v.Filters }).(GetVersionsFiltersPtrOutput)
}

// The ID of this resource.
func (o GetVersionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVersionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of available talos versions.
func (o GetVersionsResultOutput) TalosVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVersionsResult) []string { return v.TalosVersions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVersionsResultOutput{})
}
