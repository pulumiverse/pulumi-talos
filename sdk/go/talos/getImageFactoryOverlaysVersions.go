// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package talos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/internal"
)

// The image factory overlays versions data source provides a list of available overlays for a specific talos version from the image factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-talos/sdk/go/talos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := talos.GetImageFactoryOverlaysVersions(ctx, &talos.GetImageFactoryOverlaysVersionsArgs{
//				TalosVersion: "v1.7.5",
//				Filters: talos.GetImageFactoryOverlaysVersionsFilters{
//					Name: pulumi.StringRef("rock4cplus"),
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetImageFactoryOverlaysVersions(ctx *pulumi.Context, args *GetImageFactoryOverlaysVersionsArgs, opts ...pulumi.InvokeOption) (*GetImageFactoryOverlaysVersionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageFactoryOverlaysVersionsResult
	err := ctx.Invoke("talos:index/getImageFactoryOverlaysVersions:getImageFactoryOverlaysVersions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImageFactoryOverlaysVersions.
type GetImageFactoryOverlaysVersionsArgs struct {
	// The filter to apply to the overlays list.
	Filters *GetImageFactoryOverlaysVersionsFilters `pulumi:"filters"`
	// The talos version to get overlays for.
	TalosVersion string `pulumi:"talosVersion"`
}

// A collection of values returned by getImageFactoryOverlaysVersions.
type GetImageFactoryOverlaysVersionsResult struct {
	// The filter to apply to the overlays list.
	Filters *GetImageFactoryOverlaysVersionsFilters `pulumi:"filters"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The list of available extensions for the specified talos version.
	OverlaysInfos []GetImageFactoryOverlaysVersionsOverlaysInfo `pulumi:"overlaysInfos"`
	// The talos version to get overlays for.
	TalosVersion string `pulumi:"talosVersion"`
}

func GetImageFactoryOverlaysVersionsOutput(ctx *pulumi.Context, args GetImageFactoryOverlaysVersionsOutputArgs, opts ...pulumi.InvokeOption) GetImageFactoryOverlaysVersionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetImageFactoryOverlaysVersionsResultOutput, error) {
			args := v.(GetImageFactoryOverlaysVersionsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetImageFactoryOverlaysVersionsResult
			secret, err := ctx.InvokePackageRaw("talos:index/getImageFactoryOverlaysVersions:getImageFactoryOverlaysVersions", args, &rv, "", opts...)
			if err != nil {
				return GetImageFactoryOverlaysVersionsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetImageFactoryOverlaysVersionsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetImageFactoryOverlaysVersionsResultOutput), nil
			}
			return output, nil
		}).(GetImageFactoryOverlaysVersionsResultOutput)
}

// A collection of arguments for invoking getImageFactoryOverlaysVersions.
type GetImageFactoryOverlaysVersionsOutputArgs struct {
	// The filter to apply to the overlays list.
	Filters GetImageFactoryOverlaysVersionsFiltersPtrInput `pulumi:"filters"`
	// The talos version to get overlays for.
	TalosVersion pulumi.StringInput `pulumi:"talosVersion"`
}

func (GetImageFactoryOverlaysVersionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageFactoryOverlaysVersionsArgs)(nil)).Elem()
}

// A collection of values returned by getImageFactoryOverlaysVersions.
type GetImageFactoryOverlaysVersionsResultOutput struct{ *pulumi.OutputState }

func (GetImageFactoryOverlaysVersionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageFactoryOverlaysVersionsResult)(nil)).Elem()
}

func (o GetImageFactoryOverlaysVersionsResultOutput) ToGetImageFactoryOverlaysVersionsResultOutput() GetImageFactoryOverlaysVersionsResultOutput {
	return o
}

func (o GetImageFactoryOverlaysVersionsResultOutput) ToGetImageFactoryOverlaysVersionsResultOutputWithContext(ctx context.Context) GetImageFactoryOverlaysVersionsResultOutput {
	return o
}

// The filter to apply to the overlays list.
func (o GetImageFactoryOverlaysVersionsResultOutput) Filters() GetImageFactoryOverlaysVersionsFiltersPtrOutput {
	return o.ApplyT(func(v GetImageFactoryOverlaysVersionsResult) *GetImageFactoryOverlaysVersionsFilters {
		return v.Filters
	}).(GetImageFactoryOverlaysVersionsFiltersPtrOutput)
}

// The ID of this resource.
func (o GetImageFactoryOverlaysVersionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageFactoryOverlaysVersionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of available extensions for the specified talos version.
func (o GetImageFactoryOverlaysVersionsResultOutput) OverlaysInfos() GetImageFactoryOverlaysVersionsOverlaysInfoArrayOutput {
	return o.ApplyT(func(v GetImageFactoryOverlaysVersionsResult) []GetImageFactoryOverlaysVersionsOverlaysInfo {
		return v.OverlaysInfos
	}).(GetImageFactoryOverlaysVersionsOverlaysInfoArrayOutput)
}

// The talos version to get overlays for.
func (o GetImageFactoryOverlaysVersionsResultOutput) TalosVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageFactoryOverlaysVersionsResult) string { return v.TalosVersion }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageFactoryOverlaysVersionsResultOutput{})
}
