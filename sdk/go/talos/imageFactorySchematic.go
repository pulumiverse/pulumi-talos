// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package talos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/internal"
)

// The image factory schematic resource allows you to create a schematic for a Talos image.
type ImageFactorySchematic struct {
	pulumi.CustomResourceState

	// The schematic yaml respresentation to generate the image.
	Schematic pulumi.StringPtrOutput `pulumi:"schematic"`
}

// NewImageFactorySchematic registers a new resource with the given unique name, arguments, and options.
func NewImageFactorySchematic(ctx *pulumi.Context,
	name string, args *ImageFactorySchematicArgs, opts ...pulumi.ResourceOption) (*ImageFactorySchematic, error) {
	if args == nil {
		args = &ImageFactorySchematicArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageFactorySchematic
	err := ctx.RegisterResource("talos:index/imageFactorySchematic:ImageFactorySchematic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageFactorySchematic gets an existing ImageFactorySchematic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageFactorySchematic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageFactorySchematicState, opts ...pulumi.ResourceOption) (*ImageFactorySchematic, error) {
	var resource ImageFactorySchematic
	err := ctx.ReadResource("talos:index/imageFactorySchematic:ImageFactorySchematic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageFactorySchematic resources.
type imageFactorySchematicState struct {
	// The schematic yaml respresentation to generate the image.
	Schematic *string `pulumi:"schematic"`
}

type ImageFactorySchematicState struct {
	// The schematic yaml respresentation to generate the image.
	Schematic pulumi.StringPtrInput
}

func (ImageFactorySchematicState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageFactorySchematicState)(nil)).Elem()
}

type imageFactorySchematicArgs struct {
	// The schematic yaml respresentation to generate the image.
	Schematic *string `pulumi:"schematic"`
}

// The set of arguments for constructing a ImageFactorySchematic resource.
type ImageFactorySchematicArgs struct {
	// The schematic yaml respresentation to generate the image.
	Schematic pulumi.StringPtrInput
}

func (ImageFactorySchematicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageFactorySchematicArgs)(nil)).Elem()
}

type ImageFactorySchematicInput interface {
	pulumi.Input

	ToImageFactorySchematicOutput() ImageFactorySchematicOutput
	ToImageFactorySchematicOutputWithContext(ctx context.Context) ImageFactorySchematicOutput
}

func (*ImageFactorySchematic) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageFactorySchematic)(nil)).Elem()
}

func (i *ImageFactorySchematic) ToImageFactorySchematicOutput() ImageFactorySchematicOutput {
	return i.ToImageFactorySchematicOutputWithContext(context.Background())
}

func (i *ImageFactorySchematic) ToImageFactorySchematicOutputWithContext(ctx context.Context) ImageFactorySchematicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageFactorySchematicOutput)
}

// ImageFactorySchematicArrayInput is an input type that accepts ImageFactorySchematicArray and ImageFactorySchematicArrayOutput values.
// You can construct a concrete instance of `ImageFactorySchematicArrayInput` via:
//
//	ImageFactorySchematicArray{ ImageFactorySchematicArgs{...} }
type ImageFactorySchematicArrayInput interface {
	pulumi.Input

	ToImageFactorySchematicArrayOutput() ImageFactorySchematicArrayOutput
	ToImageFactorySchematicArrayOutputWithContext(context.Context) ImageFactorySchematicArrayOutput
}

type ImageFactorySchematicArray []ImageFactorySchematicInput

func (ImageFactorySchematicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageFactorySchematic)(nil)).Elem()
}

func (i ImageFactorySchematicArray) ToImageFactorySchematicArrayOutput() ImageFactorySchematicArrayOutput {
	return i.ToImageFactorySchematicArrayOutputWithContext(context.Background())
}

func (i ImageFactorySchematicArray) ToImageFactorySchematicArrayOutputWithContext(ctx context.Context) ImageFactorySchematicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageFactorySchematicArrayOutput)
}

// ImageFactorySchematicMapInput is an input type that accepts ImageFactorySchematicMap and ImageFactorySchematicMapOutput values.
// You can construct a concrete instance of `ImageFactorySchematicMapInput` via:
//
//	ImageFactorySchematicMap{ "key": ImageFactorySchematicArgs{...} }
type ImageFactorySchematicMapInput interface {
	pulumi.Input

	ToImageFactorySchematicMapOutput() ImageFactorySchematicMapOutput
	ToImageFactorySchematicMapOutputWithContext(context.Context) ImageFactorySchematicMapOutput
}

type ImageFactorySchematicMap map[string]ImageFactorySchematicInput

func (ImageFactorySchematicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageFactorySchematic)(nil)).Elem()
}

func (i ImageFactorySchematicMap) ToImageFactorySchematicMapOutput() ImageFactorySchematicMapOutput {
	return i.ToImageFactorySchematicMapOutputWithContext(context.Background())
}

func (i ImageFactorySchematicMap) ToImageFactorySchematicMapOutputWithContext(ctx context.Context) ImageFactorySchematicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageFactorySchematicMapOutput)
}

type ImageFactorySchematicOutput struct{ *pulumi.OutputState }

func (ImageFactorySchematicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageFactorySchematic)(nil)).Elem()
}

func (o ImageFactorySchematicOutput) ToImageFactorySchematicOutput() ImageFactorySchematicOutput {
	return o
}

func (o ImageFactorySchematicOutput) ToImageFactorySchematicOutputWithContext(ctx context.Context) ImageFactorySchematicOutput {
	return o
}

// The schematic yaml respresentation to generate the image.
func (o ImageFactorySchematicOutput) Schematic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageFactorySchematic) pulumi.StringPtrOutput { return v.Schematic }).(pulumi.StringPtrOutput)
}

type ImageFactorySchematicArrayOutput struct{ *pulumi.OutputState }

func (ImageFactorySchematicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageFactorySchematic)(nil)).Elem()
}

func (o ImageFactorySchematicArrayOutput) ToImageFactorySchematicArrayOutput() ImageFactorySchematicArrayOutput {
	return o
}

func (o ImageFactorySchematicArrayOutput) ToImageFactorySchematicArrayOutputWithContext(ctx context.Context) ImageFactorySchematicArrayOutput {
	return o
}

func (o ImageFactorySchematicArrayOutput) Index(i pulumi.IntInput) ImageFactorySchematicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageFactorySchematic {
		return vs[0].([]*ImageFactorySchematic)[vs[1].(int)]
	}).(ImageFactorySchematicOutput)
}

type ImageFactorySchematicMapOutput struct{ *pulumi.OutputState }

func (ImageFactorySchematicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageFactorySchematic)(nil)).Elem()
}

func (o ImageFactorySchematicMapOutput) ToImageFactorySchematicMapOutput() ImageFactorySchematicMapOutput {
	return o
}

func (o ImageFactorySchematicMapOutput) ToImageFactorySchematicMapOutputWithContext(ctx context.Context) ImageFactorySchematicMapOutput {
	return o
}

func (o ImageFactorySchematicMapOutput) MapIndex(k pulumi.StringInput) ImageFactorySchematicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageFactorySchematic {
		return vs[0].(map[string]*ImageFactorySchematic)[vs[1].(string)]
	}).(ImageFactorySchematicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageFactorySchematicInput)(nil)).Elem(), &ImageFactorySchematic{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageFactorySchematicArrayInput)(nil)).Elem(), ImageFactorySchematicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageFactorySchematicMapInput)(nil)).Elem(), ImageFactorySchematicMap{})
	pulumi.RegisterOutputType(ImageFactorySchematicOutput{})
	pulumi.RegisterOutputType(ImageFactorySchematicArrayOutput{})
	pulumi.RegisterOutputType(ImageFactorySchematicMapOutput{})
}
