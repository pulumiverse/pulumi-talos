// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Talos.Machine
{
    public static class GetDisks
    {
        /// <summary>
        /// Generate a machine configuration for a node type
        /// 
        /// &gt; **Note:** Since Talos natively supports `.machine.install.diskSelector`, the `talos.machine.getDisks` data source maybe just used to query disk information that could be used elsewhere. It's recommended to use `machine.install.diskSelector` in Talos machine configuration.
        /// </summary>
        public static Task<GetDisksResult> InvokeAsync(GetDisksArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDisksResult>("talos:machine/getDisks:getDisks", args ?? new GetDisksArgs(), options.WithDefaults());

        /// <summary>
        /// Generate a machine configuration for a node type
        /// 
        /// &gt; **Note:** Since Talos natively supports `.machine.install.diskSelector`, the `talos.machine.getDisks` data source maybe just used to query disk information that could be used elsewhere. It's recommended to use `machine.install.diskSelector` in Talos machine configuration.
        /// </summary>
        public static Output<GetDisksResult> Invoke(GetDisksInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDisksResult>("talos:machine/getDisks:getDisks", args ?? new GetDisksInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Generate a machine configuration for a node type
        /// 
        /// &gt; **Note:** Since Talos natively supports `.machine.install.diskSelector`, the `talos.machine.getDisks` data source maybe just used to query disk information that could be used elsewhere. It's recommended to use `machine.install.diskSelector` in Talos machine configuration.
        /// </summary>
        public static Output<GetDisksResult> Invoke(GetDisksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDisksResult>("talos:machine/getDisks:getDisks", args ?? new GetDisksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDisksArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The client configuration data
        /// </summary>
        [Input("clientConfiguration", required: true)]
        public Inputs.GetDisksClientConfigurationArgs ClientConfiguration { get; set; } = null!;

        /// <summary>
        /// endpoint to use for the talosclient. If not set, the node value will be used
        /// </summary>
        [Input("endpoint")]
        public string? Endpoint { get; set; }

        /// <summary>
        /// controlplane node to retrieve the kubeconfig from
        /// </summary>
        [Input("node", required: true)]
        public string Node { get; set; } = null!;

        /// <summary>
        /// The CEL expression to filter the disks.
        /// If not set, all disks will be returned.
        /// See [CEL documentation](https://www.talos.dev/latest/talos-guides/configuration/disk-management/#disk-selector).
        /// </summary>
        [Input("selector")]
        public string? Selector { get; set; }

        [Input("timeouts")]
        public Inputs.GetDisksTimeoutsArgs? Timeouts { get; set; }

        public GetDisksArgs()
        {
        }
        public static new GetDisksArgs Empty => new GetDisksArgs();
    }

    public sealed class GetDisksInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The client configuration data
        /// </summary>
        [Input("clientConfiguration", required: true)]
        public Input<Inputs.GetDisksClientConfigurationInputArgs> ClientConfiguration { get; set; } = null!;

        /// <summary>
        /// endpoint to use for the talosclient. If not set, the node value will be used
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// controlplane node to retrieve the kubeconfig from
        /// </summary>
        [Input("node", required: true)]
        public Input<string> Node { get; set; } = null!;

        /// <summary>
        /// The CEL expression to filter the disks.
        /// If not set, all disks will be returned.
        /// See [CEL documentation](https://www.talos.dev/latest/talos-guides/configuration/disk-management/#disk-selector).
        /// </summary>
        [Input("selector")]
        public Input<string>? Selector { get; set; }

        [Input("timeouts")]
        public Input<Inputs.GetDisksTimeoutsInputArgs>? Timeouts { get; set; }

        public GetDisksInvokeArgs()
        {
        }
        public static new GetDisksInvokeArgs Empty => new GetDisksInvokeArgs();
    }


    [OutputType]
    public sealed class GetDisksResult
    {
        /// <summary>
        /// The client configuration data
        /// </summary>
        public readonly Outputs.GetDisksClientConfigurationResult ClientConfiguration;
        /// <summary>
        /// The disks that match the filters
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDisksDiskResult> Disks;
        /// <summary>
        /// endpoint to use for the talosclient. If not set, the node value will be used
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The generated ID of this resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// controlplane node to retrieve the kubeconfig from
        /// </summary>
        public readonly string Node;
        /// <summary>
        /// The CEL expression to filter the disks.
        /// If not set, all disks will be returned.
        /// See [CEL documentation](https://www.talos.dev/latest/talos-guides/configuration/disk-management/#disk-selector).
        /// </summary>
        public readonly string? Selector;
        public readonly Outputs.GetDisksTimeoutsResult? Timeouts;

        [OutputConstructor]
        private GetDisksResult(
            Outputs.GetDisksClientConfigurationResult clientConfiguration,

            ImmutableArray<Outputs.GetDisksDiskResult> disks,

            string endpoint,

            string id,

            string node,

            string? selector,

            Outputs.GetDisksTimeoutsResult? timeouts)
        {
            ClientConfiguration = clientConfiguration;
            Disks = disks;
            Endpoint = endpoint;
            Id = id;
            Node = node;
            Selector = selector;
            Timeouts = timeouts;
        }
    }
}
