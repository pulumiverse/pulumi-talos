// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Generate machine configuration for a Talos control plane node.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as talos from "@siderolabs/pulumi-talos";
 *
 * const machineSecrets = new talos.machine.Secrets("machineSecrets", {});
 * const talosconfig = new talos.client.Configuration("talosconfig", {
 *     clusterName: "example-cluster",
 *     machineSecrets: machineSecrets.machineSecrets,
 *     endpoints: ["10.5.0.2"],
 * });
 * const machineconfigCp = new talos.machine.ConfigurationControlplane("machineconfigCp", {
 *     clusterName: talosconfig.clusterName,
 *     clusterEndpoint: "https://cluster.local:6443",
 *     machineSecrets: machineSecrets.machineSecrets,
 * });
 * ```
 */
export class ConfigurationControlplane extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationControlplane resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationControlplaneState, opts?: pulumi.CustomResourceOptions): ConfigurationControlplane {
        return new ConfigurationControlplane(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'talos:machine/configurationControlplane:ConfigurationControlplane';

    /**
     * Returns true if the given object is an instance of ConfigurationControlplane.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationControlplane {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationControlplane.__pulumiType;
    }

    /**
     * The endpoint of the Talos cluster
     */
    public readonly clusterEndpoint!: pulumi.Output<string>;
    /**
     * The name of the cluster in the generated config
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * config patches to apply to the generated config
     */
    public readonly configPatches!: pulumi.Output<string[] | undefined>;
    /**
     * the desired machine config version to generate
     */
    public readonly configVersion!: pulumi.Output<string | undefined>;
    /**
     * whether to render all machine configs adding the documentation for each field
     */
    public readonly docsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * whether to render all machine configs with the commented examples
     */
    public readonly examplesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * desired kubernetes version to run
     */
    public readonly kubernetesVersion!: pulumi.Output<string | undefined>;
    /**
     * the generated control plane config
     */
    public /*out*/ readonly machineConfig!: pulumi.Output<string>;
    /**
     * The machine secrets for the cluster
     */
    public readonly machineSecrets!: pulumi.Output<string>;
    /**
     * The version of Talos for which to generate configs
     */
    public readonly talosVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a ConfigurationControlplane resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationControlplaneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationControlplaneArgs | ConfigurationControlplaneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationControlplaneState | undefined;
            resourceInputs["clusterEndpoint"] = state ? state.clusterEndpoint : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["configPatches"] = state ? state.configPatches : undefined;
            resourceInputs["configVersion"] = state ? state.configVersion : undefined;
            resourceInputs["docsEnabled"] = state ? state.docsEnabled : undefined;
            resourceInputs["examplesEnabled"] = state ? state.examplesEnabled : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["machineConfig"] = state ? state.machineConfig : undefined;
            resourceInputs["machineSecrets"] = state ? state.machineSecrets : undefined;
            resourceInputs["talosVersion"] = state ? state.talosVersion : undefined;
        } else {
            const args = argsOrState as ConfigurationControlplaneArgs | undefined;
            if ((!args || args.clusterEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterEndpoint'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.machineSecrets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineSecrets'");
            }
            resourceInputs["clusterEndpoint"] = args ? args.clusterEndpoint : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["configPatches"] = args ? args.configPatches : undefined;
            resourceInputs["configVersion"] = args ? args.configVersion : undefined;
            resourceInputs["docsEnabled"] = args ? args.docsEnabled : undefined;
            resourceInputs["examplesEnabled"] = args ? args.examplesEnabled : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["machineSecrets"] = args ? args.machineSecrets : undefined;
            resourceInputs["talosVersion"] = args ? args.talosVersion : undefined;
            resourceInputs["machineConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["machineConfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConfigurationControlplane.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigurationControlplane resources.
 */
export interface ConfigurationControlplaneState {
    /**
     * The endpoint of the Talos cluster
     */
    clusterEndpoint?: pulumi.Input<string>;
    /**
     * The name of the cluster in the generated config
     */
    clusterName?: pulumi.Input<string>;
    /**
     * config patches to apply to the generated config
     */
    configPatches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the desired machine config version to generate
     */
    configVersion?: pulumi.Input<string>;
    /**
     * whether to render all machine configs adding the documentation for each field
     */
    docsEnabled?: pulumi.Input<boolean>;
    /**
     * whether to render all machine configs with the commented examples
     */
    examplesEnabled?: pulumi.Input<boolean>;
    /**
     * desired kubernetes version to run
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * the generated control plane config
     */
    machineConfig?: pulumi.Input<string>;
    /**
     * The machine secrets for the cluster
     */
    machineSecrets?: pulumi.Input<string>;
    /**
     * The version of Talos for which to generate configs
     */
    talosVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigurationControlplane resource.
 */
export interface ConfigurationControlplaneArgs {
    /**
     * The endpoint of the Talos cluster
     */
    clusterEndpoint: pulumi.Input<string>;
    /**
     * The name of the cluster in the generated config
     */
    clusterName: pulumi.Input<string>;
    /**
     * config patches to apply to the generated config
     */
    configPatches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * the desired machine config version to generate
     */
    configVersion?: pulumi.Input<string>;
    /**
     * whether to render all machine configs adding the documentation for each field
     */
    docsEnabled?: pulumi.Input<boolean>;
    /**
     * whether to render all machine configs with the commented examples
     */
    examplesEnabled?: pulumi.Input<boolean>;
    /**
     * desired kubernetes version to run
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * The machine secrets for the cluster
     */
    machineSecrets: pulumi.Input<string>;
    /**
     * The version of Talos for which to generate configs
     */
    talosVersion?: pulumi.Input<string>;
}
