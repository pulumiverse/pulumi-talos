# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetExtensionsVersionsExtensionsInfoResult',
    'GetExtensionsVersionsFiltersResult',
    'GetOverlaysVersionsFiltersResult',
    'GetOverlaysVersionsOverlaysInfoResult',
    'GetUrlsUrlsResult',
    'GetVersionsFiltersResult',
]

@pulumi.output_type
class GetExtensionsVersionsExtensionsInfoResult(dict):
    def __init__(__self__, *,
                 author: str,
                 description: str,
                 digest: str,
                 name: str,
                 ref: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def digest(self) -> str:
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        return pulumi.get(self, "ref")


@pulumi.output_type
class GetExtensionsVersionsFiltersResult(dict):
    def __init__(__self__, *,
                 names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] names: The name of the extension to filter by.
        """
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        """
        The name of the extension to filter by.
        """
        return pulumi.get(self, "names")


@pulumi.output_type
class GetOverlaysVersionsFiltersResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: The name of the overlay to filter by.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the overlay to filter by.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetOverlaysVersionsOverlaysInfoResult(dict):
    def __init__(__self__, *,
                 digest: str,
                 image: str,
                 name: str,
                 ref: str):
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref", ref)

    @property
    @pulumi.getter
    def digest(self) -> str:
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> str:
        return pulumi.get(self, "ref")


@pulumi.output_type
class GetUrlsUrlsResult(dict):
    def __init__(__self__, *,
                 disk_image: str,
                 disk_image_secureboot: str,
                 initramfs: str,
                 installer: str,
                 installer_secureboot: str,
                 iso: str,
                 iso_secureboot: str,
                 kernel: str,
                 kernel_command_line: str,
                 pxe: str,
                 uki: str):
        """
        :param str disk_image: The URL for the disk image.
        :param str disk_image_secureboot: The URL for the disk image with secure boot.
        :param str initramfs: The URL for the initramfs image.
        :param str installer: The URL for the installer image.
        :param str installer_secureboot: The URL for the installer image with secure boot.
        :param str iso: The URL for the ISO image.
        :param str iso_secureboot: The URL for the ISO image with secure boot.
        :param str kernel: The URL for the kernel image.
        :param str kernel_command_line: The URL for the kernel command line.
        :param str pxe: The URL for the PXE image.
        :param str uki: The URL for the UKI image.
        """
        pulumi.set(__self__, "disk_image", disk_image)
        pulumi.set(__self__, "disk_image_secureboot", disk_image_secureboot)
        pulumi.set(__self__, "initramfs", initramfs)
        pulumi.set(__self__, "installer", installer)
        pulumi.set(__self__, "installer_secureboot", installer_secureboot)
        pulumi.set(__self__, "iso", iso)
        pulumi.set(__self__, "iso_secureboot", iso_secureboot)
        pulumi.set(__self__, "kernel", kernel)
        pulumi.set(__self__, "kernel_command_line", kernel_command_line)
        pulumi.set(__self__, "pxe", pxe)
        pulumi.set(__self__, "uki", uki)

    @property
    @pulumi.getter(name="diskImage")
    def disk_image(self) -> str:
        """
        The URL for the disk image.
        """
        return pulumi.get(self, "disk_image")

    @property
    @pulumi.getter(name="diskImageSecureboot")
    def disk_image_secureboot(self) -> str:
        """
        The URL for the disk image with secure boot.
        """
        return pulumi.get(self, "disk_image_secureboot")

    @property
    @pulumi.getter
    def initramfs(self) -> str:
        """
        The URL for the initramfs image.
        """
        return pulumi.get(self, "initramfs")

    @property
    @pulumi.getter
    def installer(self) -> str:
        """
        The URL for the installer image.
        """
        return pulumi.get(self, "installer")

    @property
    @pulumi.getter(name="installerSecureboot")
    def installer_secureboot(self) -> str:
        """
        The URL for the installer image with secure boot.
        """
        return pulumi.get(self, "installer_secureboot")

    @property
    @pulumi.getter
    def iso(self) -> str:
        """
        The URL for the ISO image.
        """
        return pulumi.get(self, "iso")

    @property
    @pulumi.getter(name="isoSecureboot")
    def iso_secureboot(self) -> str:
        """
        The URL for the ISO image with secure boot.
        """
        return pulumi.get(self, "iso_secureboot")

    @property
    @pulumi.getter
    def kernel(self) -> str:
        """
        The URL for the kernel image.
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter(name="kernelCommandLine")
    def kernel_command_line(self) -> str:
        """
        The URL for the kernel command line.
        """
        return pulumi.get(self, "kernel_command_line")

    @property
    @pulumi.getter
    def pxe(self) -> str:
        """
        The URL for the PXE image.
        """
        return pulumi.get(self, "pxe")

    @property
    @pulumi.getter
    def uki(self) -> str:
        """
        The URL for the UKI image.
        """
        return pulumi.get(self, "uki")


@pulumi.output_type
class GetVersionsFiltersResult(dict):
    def __init__(__self__, *,
                 stable_versions_only: Optional[bool] = None):
        """
        :param bool stable_versions_only: If set to true, only stable versions will be returned. If set to false, all versions will be returned.
        """
        if stable_versions_only is not None:
            pulumi.set(__self__, "stable_versions_only", stable_versions_only)

    @property
    @pulumi.getter(name="stableVersionsOnly")
    def stable_versions_only(self) -> Optional[bool]:
        """
        If set to true, only stable versions will be returned. If set to false, all versions will be returned.
        """
        return pulumi.get(self, "stable_versions_only")


