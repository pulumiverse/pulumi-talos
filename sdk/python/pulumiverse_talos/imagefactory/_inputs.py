# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetExtensionsVersionsFiltersArgs',
    'GetExtensionsVersionsFiltersArgsDict',
    'GetOverlaysVersionsFiltersArgs',
    'GetOverlaysVersionsFiltersArgsDict',
    'GetVersionsFiltersArgs',
    'GetVersionsFiltersArgsDict',
]

MYPY = False

if not MYPY:
    class GetExtensionsVersionsFiltersArgsDict(TypedDict):
        names: NotRequired[Sequence[str]]
        """
        The name of the extension to filter by.
        """
elif False:
    GetExtensionsVersionsFiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetExtensionsVersionsFiltersArgs:
    def __init__(__self__, *,
                 names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] names: The name of the extension to filter by.
        """
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        """
        The name of the extension to filter by.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "names", value)


if not MYPY:
    class GetOverlaysVersionsFiltersArgsDict(TypedDict):
        name: NotRequired[str]
        """
        The name of the overlay to filter by.
        """
elif False:
    GetOverlaysVersionsFiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetOverlaysVersionsFiltersArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: The name of the overlay to filter by.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the overlay to filter by.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GetVersionsFiltersArgsDict(TypedDict):
        stable_versions_only: NotRequired[bool]
        """
        If set to true, only stable versions will be returned. If set to false, all versions will be returned.
        """
elif False:
    GetVersionsFiltersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVersionsFiltersArgs:
    def __init__(__self__, *,
                 stable_versions_only: Optional[bool] = None):
        """
        :param bool stable_versions_only: If set to true, only stable versions will be returned. If set to false, all versions will be returned.
        """
        if stable_versions_only is not None:
            pulumi.set(__self__, "stable_versions_only", stable_versions_only)

    @property
    @pulumi.getter(name="stableVersionsOnly")
    def stable_versions_only(self) -> Optional[bool]:
        """
        If set to true, only stable versions will be returned. If set to false, all versions will be returned.
        """
        return pulumi.get(self, "stable_versions_only")

    @stable_versions_only.setter
    def stable_versions_only(self, value: Optional[bool]):
        pulumi.set(self, "stable_versions_only", value)


