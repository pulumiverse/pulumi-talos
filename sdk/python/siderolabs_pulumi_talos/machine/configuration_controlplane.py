# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ConfigurationControlplaneArgs', 'ConfigurationControlplane']

@pulumi.input_type
class ConfigurationControlplaneArgs:
    def __init__(__self__, *,
                 cluster_endpoint: pulumi.Input[str],
                 cluster_name: pulumi.Input[str],
                 machine_secrets: pulumi.Input[str],
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_version: Optional[pulumi.Input[str]] = None,
                 docs_enabled: Optional[pulumi.Input[bool]] = None,
                 examples_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 talos_version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ConfigurationControlplane resource.
        :param pulumi.Input[str] cluster_endpoint: The endpoint of the Talos cluster
        :param pulumi.Input[str] cluster_name: The name of the cluster in the generated config
        :param pulumi.Input[str] machine_secrets: The machine secrets for the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_patches: config patches to apply to the generated config
        :param pulumi.Input[str] config_version: the desired machine config version to generate
        :param pulumi.Input[bool] docs_enabled: whether to render all machine configs adding the documentation for each field
        :param pulumi.Input[bool] examples_enabled: whether to render all machine configs with the commented examples
        :param pulumi.Input[str] kubernetes_version: desired kubernetes version to run
        :param pulumi.Input[str] talos_version: The version of Talos for which to generate configs
        """
        pulumi.set(__self__, "cluster_endpoint", cluster_endpoint)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "machine_secrets", machine_secrets)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if config_version is not None:
            pulumi.set(__self__, "config_version", config_version)
        if docs_enabled is not None:
            pulumi.set(__self__, "docs_enabled", docs_enabled)
        if examples_enabled is not None:
            pulumi.set(__self__, "examples_enabled", examples_enabled)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="clusterEndpoint")
    def cluster_endpoint(self) -> pulumi.Input[str]:
        """
        The endpoint of the Talos cluster
        """
        return pulumi.get(self, "cluster_endpoint")

    @cluster_endpoint.setter
    def cluster_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_endpoint", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name of the cluster in the generated config
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="machineSecrets")
    def machine_secrets(self) -> pulumi.Input[str]:
        """
        The machine secrets for the cluster
        """
        return pulumi.get(self, "machine_secrets")

    @machine_secrets.setter
    def machine_secrets(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_secrets", value)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        config patches to apply to the generated config
        """
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> Optional[pulumi.Input[str]]:
        """
        the desired machine config version to generate
        """
        return pulumi.get(self, "config_version")

    @config_version.setter
    def config_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_version", value)

    @property
    @pulumi.getter(name="docsEnabled")
    def docs_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to render all machine configs adding the documentation for each field
        """
        return pulumi.get(self, "docs_enabled")

    @docs_enabled.setter
    def docs_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "docs_enabled", value)

    @property
    @pulumi.getter(name="examplesEnabled")
    def examples_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to render all machine configs with the commented examples
        """
        return pulumi.get(self, "examples_enabled")

    @examples_enabled.setter
    def examples_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "examples_enabled", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        desired kubernetes version to run
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of Talos for which to generate configs
        """
        return pulumi.get(self, "talos_version")

    @talos_version.setter
    def talos_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_version", value)


@pulumi.input_type
class _ConfigurationControlplaneState:
    def __init__(__self__, *,
                 cluster_endpoint: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_version: Optional[pulumi.Input[str]] = None,
                 docs_enabled: Optional[pulumi.Input[bool]] = None,
                 examples_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 machine_config: Optional[pulumi.Input[str]] = None,
                 machine_secrets: Optional[pulumi.Input[str]] = None,
                 talos_version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConfigurationControlplane resources.
        :param pulumi.Input[str] cluster_endpoint: The endpoint of the Talos cluster
        :param pulumi.Input[str] cluster_name: The name of the cluster in the generated config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_patches: config patches to apply to the generated config
        :param pulumi.Input[str] config_version: the desired machine config version to generate
        :param pulumi.Input[bool] docs_enabled: whether to render all machine configs adding the documentation for each field
        :param pulumi.Input[bool] examples_enabled: whether to render all machine configs with the commented examples
        :param pulumi.Input[str] kubernetes_version: desired kubernetes version to run
        :param pulumi.Input[str] machine_config: the generated control plane config
        :param pulumi.Input[str] machine_secrets: The machine secrets for the cluster
        :param pulumi.Input[str] talos_version: The version of Talos for which to generate configs
        """
        if cluster_endpoint is not None:
            pulumi.set(__self__, "cluster_endpoint", cluster_endpoint)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if config_version is not None:
            pulumi.set(__self__, "config_version", config_version)
        if docs_enabled is not None:
            pulumi.set(__self__, "docs_enabled", docs_enabled)
        if examples_enabled is not None:
            pulumi.set(__self__, "examples_enabled", examples_enabled)
        if kubernetes_version is not None:
            pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        if machine_config is not None:
            pulumi.set(__self__, "machine_config", machine_config)
        if machine_secrets is not None:
            pulumi.set(__self__, "machine_secrets", machine_secrets)
        if talos_version is not None:
            pulumi.set(__self__, "talos_version", talos_version)

    @property
    @pulumi.getter(name="clusterEndpoint")
    def cluster_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The endpoint of the Talos cluster
        """
        return pulumi.get(self, "cluster_endpoint")

    @cluster_endpoint.setter
    def cluster_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_endpoint", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cluster in the generated config
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        config patches to apply to the generated config
        """
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> Optional[pulumi.Input[str]]:
        """
        the desired machine config version to generate
        """
        return pulumi.get(self, "config_version")

    @config_version.setter
    def config_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_version", value)

    @property
    @pulumi.getter(name="docsEnabled")
    def docs_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to render all machine configs adding the documentation for each field
        """
        return pulumi.get(self, "docs_enabled")

    @docs_enabled.setter
    def docs_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "docs_enabled", value)

    @property
    @pulumi.getter(name="examplesEnabled")
    def examples_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to render all machine configs with the commented examples
        """
        return pulumi.get(self, "examples_enabled")

    @examples_enabled.setter
    def examples_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "examples_enabled", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        desired kubernetes version to run
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="machineConfig")
    def machine_config(self) -> Optional[pulumi.Input[str]]:
        """
        the generated control plane config
        """
        return pulumi.get(self, "machine_config")

    @machine_config.setter
    def machine_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_config", value)

    @property
    @pulumi.getter(name="machineSecrets")
    def machine_secrets(self) -> Optional[pulumi.Input[str]]:
        """
        The machine secrets for the cluster
        """
        return pulumi.get(self, "machine_secrets")

    @machine_secrets.setter
    def machine_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_secrets", value)

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of Talos for which to generate configs
        """
        return pulumi.get(self, "talos_version")

    @talos_version.setter
    def talos_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_version", value)


class ConfigurationControlplane(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_endpoint: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_version: Optional[pulumi.Input[str]] = None,
                 docs_enabled: Optional[pulumi.Input[bool]] = None,
                 examples_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 machine_secrets: Optional[pulumi.Input[str]] = None,
                 talos_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Generate machine configuration for a Talos control plane node.

        ## Example Usage

        ```python
        import pulumi
        import siderolabs_pulumi_talos as talos

        machine_secrets = talos.machine.Secrets("machineSecrets")
        talosconfig = talos.client.Configuration("talosconfig",
            cluster_name="example-cluster",
            machine_secrets=machine_secrets.machine_secrets,
            endpoints=["10.5.0.2"])
        machineconfig_cp = talos.machine.ConfigurationControlplane("machineconfigCp",
            cluster_name=talosconfig.cluster_name,
            cluster_endpoint="https://cluster.local:6443",
            machine_secrets=machine_secrets.machine_secrets)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_endpoint: The endpoint of the Talos cluster
        :param pulumi.Input[str] cluster_name: The name of the cluster in the generated config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_patches: config patches to apply to the generated config
        :param pulumi.Input[str] config_version: the desired machine config version to generate
        :param pulumi.Input[bool] docs_enabled: whether to render all machine configs adding the documentation for each field
        :param pulumi.Input[bool] examples_enabled: whether to render all machine configs with the commented examples
        :param pulumi.Input[str] kubernetes_version: desired kubernetes version to run
        :param pulumi.Input[str] machine_secrets: The machine secrets for the cluster
        :param pulumi.Input[str] talos_version: The version of Talos for which to generate configs
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigurationControlplaneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Generate machine configuration for a Talos control plane node.

        ## Example Usage

        ```python
        import pulumi
        import siderolabs_pulumi_talos as talos

        machine_secrets = talos.machine.Secrets("machineSecrets")
        talosconfig = talos.client.Configuration("talosconfig",
            cluster_name="example-cluster",
            machine_secrets=machine_secrets.machine_secrets,
            endpoints=["10.5.0.2"])
        machineconfig_cp = talos.machine.ConfigurationControlplane("machineconfigCp",
            cluster_name=talosconfig.cluster_name,
            cluster_endpoint="https://cluster.local:6443",
            machine_secrets=machine_secrets.machine_secrets)
        ```

        :param str resource_name: The name of the resource.
        :param ConfigurationControlplaneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigurationControlplaneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_endpoint: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 config_version: Optional[pulumi.Input[str]] = None,
                 docs_enabled: Optional[pulumi.Input[bool]] = None,
                 examples_enabled: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 machine_secrets: Optional[pulumi.Input[str]] = None,
                 talos_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigurationControlplaneArgs.__new__(ConfigurationControlplaneArgs)

            if cluster_endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_endpoint'")
            __props__.__dict__["cluster_endpoint"] = cluster_endpoint
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["config_patches"] = config_patches
            __props__.__dict__["config_version"] = config_version
            __props__.__dict__["docs_enabled"] = docs_enabled
            __props__.__dict__["examples_enabled"] = examples_enabled
            __props__.__dict__["kubernetes_version"] = kubernetes_version
            if machine_secrets is None and not opts.urn:
                raise TypeError("Missing required property 'machine_secrets'")
            __props__.__dict__["machine_secrets"] = machine_secrets
            __props__.__dict__["talos_version"] = talos_version
            __props__.__dict__["machine_config"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["machineConfig"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ConfigurationControlplane, __self__).__init__(
            'talos:machine/configurationControlplane:ConfigurationControlplane',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_endpoint: Optional[pulumi.Input[str]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            config_version: Optional[pulumi.Input[str]] = None,
            docs_enabled: Optional[pulumi.Input[bool]] = None,
            examples_enabled: Optional[pulumi.Input[bool]] = None,
            kubernetes_version: Optional[pulumi.Input[str]] = None,
            machine_config: Optional[pulumi.Input[str]] = None,
            machine_secrets: Optional[pulumi.Input[str]] = None,
            talos_version: Optional[pulumi.Input[str]] = None) -> 'ConfigurationControlplane':
        """
        Get an existing ConfigurationControlplane resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_endpoint: The endpoint of the Talos cluster
        :param pulumi.Input[str] cluster_name: The name of the cluster in the generated config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_patches: config patches to apply to the generated config
        :param pulumi.Input[str] config_version: the desired machine config version to generate
        :param pulumi.Input[bool] docs_enabled: whether to render all machine configs adding the documentation for each field
        :param pulumi.Input[bool] examples_enabled: whether to render all machine configs with the commented examples
        :param pulumi.Input[str] kubernetes_version: desired kubernetes version to run
        :param pulumi.Input[str] machine_config: the generated control plane config
        :param pulumi.Input[str] machine_secrets: The machine secrets for the cluster
        :param pulumi.Input[str] talos_version: The version of Talos for which to generate configs
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigurationControlplaneState.__new__(_ConfigurationControlplaneState)

        __props__.__dict__["cluster_endpoint"] = cluster_endpoint
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["config_patches"] = config_patches
        __props__.__dict__["config_version"] = config_version
        __props__.__dict__["docs_enabled"] = docs_enabled
        __props__.__dict__["examples_enabled"] = examples_enabled
        __props__.__dict__["kubernetes_version"] = kubernetes_version
        __props__.__dict__["machine_config"] = machine_config
        __props__.__dict__["machine_secrets"] = machine_secrets
        __props__.__dict__["talos_version"] = talos_version
        return ConfigurationControlplane(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterEndpoint")
    def cluster_endpoint(self) -> pulumi.Output[str]:
        """
        The endpoint of the Talos cluster
        """
        return pulumi.get(self, "cluster_endpoint")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        The name of the cluster in the generated config
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        config patches to apply to the generated config
        """
        return pulumi.get(self, "config_patches")

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> pulumi.Output[Optional[str]]:
        """
        the desired machine config version to generate
        """
        return pulumi.get(self, "config_version")

    @property
    @pulumi.getter(name="docsEnabled")
    def docs_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        whether to render all machine configs adding the documentation for each field
        """
        return pulumi.get(self, "docs_enabled")

    @property
    @pulumi.getter(name="examplesEnabled")
    def examples_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        whether to render all machine configs with the commented examples
        """
        return pulumi.get(self, "examples_enabled")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Output[Optional[str]]:
        """
        desired kubernetes version to run
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter(name="machineConfig")
    def machine_config(self) -> pulumi.Output[str]:
        """
        the generated control plane config
        """
        return pulumi.get(self, "machine_config")

    @property
    @pulumi.getter(name="machineSecrets")
    def machine_secrets(self) -> pulumi.Output[str]:
        """
        The machine secrets for the cluster
        """
        return pulumi.get(self, "machine_secrets")

    @property
    @pulumi.getter(name="talosVersion")
    def talos_version(self) -> pulumi.Output[Optional[str]]:
        """
        The version of Talos for which to generate configs
        """
        return pulumi.get(self, "talos_version")

