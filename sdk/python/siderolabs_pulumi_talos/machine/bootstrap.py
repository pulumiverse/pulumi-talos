# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BootstrapArgs', 'Bootstrap']

@pulumi.input_type
class BootstrapArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 node: pulumi.Input[str],
                 talos_config: pulumi.Input[str]):
        """
        The set of arguments for constructing a Bootstrap resource.
        :param pulumi.Input[str] endpoint: machine endpoint
        :param pulumi.Input[str] node: node to bootstrap
        :param pulumi.Input[str] talos_config: talos client configuration for authentication
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "node", node)
        pulumi.set(__self__, "talos_config", talos_config)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        machine endpoint
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def node(self) -> pulumi.Input[str]:
        """
        node to bootstrap
        """
        return pulumi.get(self, "node")

    @node.setter
    def node(self, value: pulumi.Input[str]):
        pulumi.set(self, "node", value)

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> pulumi.Input[str]:
        """
        talos client configuration for authentication
        """
        return pulumi.get(self, "talos_config")

    @talos_config.setter
    def talos_config(self, value: pulumi.Input[str]):
        pulumi.set(self, "talos_config", value)


@pulumi.input_type
class _BootstrapState:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 talos_config: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Bootstrap resources.
        :param pulumi.Input[str] endpoint: machine endpoint
        :param pulumi.Input[str] node: node to bootstrap
        :param pulumi.Input[str] talos_config: talos client configuration for authentication
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if talos_config is not None:
            pulumi.set(__self__, "talos_config", talos_config)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        machine endpoint
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def node(self) -> Optional[pulumi.Input[str]]:
        """
        node to bootstrap
        """
        return pulumi.get(self, "node")

    @node.setter
    def node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node", value)

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> Optional[pulumi.Input[str]]:
        """
        talos client configuration for authentication
        """
        return pulumi.get(self, "talos_config")

    @talos_config.setter
    def talos_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_config", value)


class Bootstrap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 talos_config: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Applies machine configuration to a Talos node.

        ## Example Usage

        ```python
        import pulumi
        import siderolabs_pulumi_talos as talos

        machine_secrets = talos.machine.Secrets("machineSecrets")
        talosconfig = talos.client.Configuration("talosconfig",
            cluster_name="example-cluster",
            machine_secrets=machine_secrets.machine_secrets,
            endpoints=["10.5.0.2"])
        bootstrap = talos.machine.Bootstrap("bootstrap",
            talos_config=talosconfig.talos_config,
            endpoint="10.5.0.2",
            node="10.5.0.2")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] endpoint: machine endpoint
        :param pulumi.Input[str] node: node to bootstrap
        :param pulumi.Input[str] talos_config: talos client configuration for authentication
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BootstrapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Applies machine configuration to a Talos node.

        ## Example Usage

        ```python
        import pulumi
        import siderolabs_pulumi_talos as talos

        machine_secrets = talos.machine.Secrets("machineSecrets")
        talosconfig = talos.client.Configuration("talosconfig",
            cluster_name="example-cluster",
            machine_secrets=machine_secrets.machine_secrets,
            endpoints=["10.5.0.2"])
        bootstrap = talos.machine.Bootstrap("bootstrap",
            talos_config=talosconfig.talos_config,
            endpoint="10.5.0.2",
            node="10.5.0.2")
        ```

        :param str resource_name: The name of the resource.
        :param BootstrapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BootstrapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 talos_config: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BootstrapArgs.__new__(BootstrapArgs)

            if endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint'")
            __props__.__dict__["endpoint"] = endpoint
            if node is None and not opts.urn:
                raise TypeError("Missing required property 'node'")
            __props__.__dict__["node"] = node
            if talos_config is None and not opts.urn:
                raise TypeError("Missing required property 'talos_config'")
            __props__.__dict__["talos_config"] = talos_config
        super(Bootstrap, __self__).__init__(
            'talos:machine/bootstrap:Bootstrap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endpoint: Optional[pulumi.Input[str]] = None,
            node: Optional[pulumi.Input[str]] = None,
            talos_config: Optional[pulumi.Input[str]] = None) -> 'Bootstrap':
        """
        Get an existing Bootstrap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] endpoint: machine endpoint
        :param pulumi.Input[str] node: node to bootstrap
        :param pulumi.Input[str] talos_config: talos client configuration for authentication
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BootstrapState.__new__(_BootstrapState)

        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["node"] = node
        __props__.__dict__["talos_config"] = talos_config
        return Bootstrap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        machine endpoint
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def node(self) -> pulumi.Output[str]:
        """
        node to bootstrap
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> pulumi.Output[str]:
        """
        talos client configuration for authentication
        """
        return pulumi.get(self, "talos_config")

