# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ConfigurationApplyArgs', 'ConfigurationApply']

@pulumi.input_type
class ConfigurationApplyArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 machine_configuration: pulumi.Input[str],
                 node: pulumi.Input[str],
                 talos_config: pulumi.Input[str],
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ConfigurationApply resource.
        :param pulumi.Input[str] endpoint: machine endpoint
        :param pulumi.Input[str] machine_configuration: machine configuration
        :param pulumi.Input[str] node: node to apply the config against
        :param pulumi.Input[str] talos_config: talos client configuration for authentication
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_patches: config patches to apply to the generated config
        :param pulumi.Input[str] mode: The mode to apply the configuration in.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "machine_configuration", machine_configuration)
        pulumi.set(__self__, "node", node)
        pulumi.set(__self__, "talos_config", talos_config)
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        machine endpoint
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="machineConfiguration")
    def machine_configuration(self) -> pulumi.Input[str]:
        """
        machine configuration
        """
        return pulumi.get(self, "machine_configuration")

    @machine_configuration.setter
    def machine_configuration(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_configuration", value)

    @property
    @pulumi.getter
    def node(self) -> pulumi.Input[str]:
        """
        node to apply the config against
        """
        return pulumi.get(self, "node")

    @node.setter
    def node(self, value: pulumi.Input[str]):
        pulumi.set(self, "node", value)

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> pulumi.Input[str]:
        """
        talos client configuration for authentication
        """
        return pulumi.get(self, "talos_config")

    @talos_config.setter
    def talos_config(self, value: pulumi.Input[str]):
        pulumi.set(self, "talos_config", value)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        config patches to apply to the generated config
        """
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode to apply the configuration in.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class _ConfigurationApplyState:
    def __init__(__self__, *,
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 machine_configuration: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 talos_config: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConfigurationApply resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_patches: config patches to apply to the generated config
        :param pulumi.Input[str] endpoint: machine endpoint
        :param pulumi.Input[str] machine_configuration: machine configuration
        :param pulumi.Input[str] mode: The mode to apply the configuration in.
        :param pulumi.Input[str] node: node to apply the config against
        :param pulumi.Input[str] talos_config: talos client configuration for authentication
        """
        if config_patches is not None:
            pulumi.set(__self__, "config_patches", config_patches)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if machine_configuration is not None:
            pulumi.set(__self__, "machine_configuration", machine_configuration)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if talos_config is not None:
            pulumi.set(__self__, "talos_config", talos_config)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        config patches to apply to the generated config
        """
        return pulumi.get(self, "config_patches")

    @config_patches.setter
    def config_patches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "config_patches", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        machine endpoint
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="machineConfiguration")
    def machine_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        machine configuration
        """
        return pulumi.get(self, "machine_configuration")

    @machine_configuration.setter
    def machine_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_configuration", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode to apply the configuration in.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def node(self) -> Optional[pulumi.Input[str]]:
        """
        node to apply the config against
        """
        return pulumi.get(self, "node")

    @node.setter
    def node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node", value)

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> Optional[pulumi.Input[str]]:
        """
        talos client configuration for authentication
        """
        return pulumi.get(self, "talos_config")

    @talos_config.setter
    def talos_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_config", value)


class ConfigurationApply(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 machine_configuration: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 talos_config: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Applies machine configuration to a Talos node.

        ## Example Usage

        ```python
        import pulumi
        import siderolabs_pulumi_talos as talos

        machine_secrets = talos.machine.Secrets("machineSecrets")
        talosconfig = talos.client.Configuration("talosconfig",
            cluster_name="example-cluster",
            machine_secrets=machine_secrets.machine_secrets,
            endpoints=["10.5.0.2"])
        machineconfig_cp = talos.machine.ConfigurationControlplane("machineconfigCp",
            cluster_name=talosconfig.cluster_name,
            cluster_endpoint="https://cluster.local:6443",
            machine_secrets=machine_secrets.machine_secrets)
        config_apply = talos.machine.ConfigurationApply("configApply",
            talos_config=talosconfig.talos_config,
            machine_configuration=machineconfig_cp.machine_config,
            config_patches=[(lambda path: open(path).read())(f"{path['module']}/files/worker.yaml")],
            endpoint="10.5.0.2",
            node="10.5.0.2")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_patches: config patches to apply to the generated config
        :param pulumi.Input[str] endpoint: machine endpoint
        :param pulumi.Input[str] machine_configuration: machine configuration
        :param pulumi.Input[str] mode: The mode to apply the configuration in.
        :param pulumi.Input[str] node: node to apply the config against
        :param pulumi.Input[str] talos_config: talos client configuration for authentication
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigurationApplyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Applies machine configuration to a Talos node.

        ## Example Usage

        ```python
        import pulumi
        import siderolabs_pulumi_talos as talos

        machine_secrets = talos.machine.Secrets("machineSecrets")
        talosconfig = talos.client.Configuration("talosconfig",
            cluster_name="example-cluster",
            machine_secrets=machine_secrets.machine_secrets,
            endpoints=["10.5.0.2"])
        machineconfig_cp = talos.machine.ConfigurationControlplane("machineconfigCp",
            cluster_name=talosconfig.cluster_name,
            cluster_endpoint="https://cluster.local:6443",
            machine_secrets=machine_secrets.machine_secrets)
        config_apply = talos.machine.ConfigurationApply("configApply",
            talos_config=talosconfig.talos_config,
            machine_configuration=machineconfig_cp.machine_config,
            config_patches=[(lambda path: open(path).read())(f"{path['module']}/files/worker.yaml")],
            endpoint="10.5.0.2",
            node="10.5.0.2")
        ```

        :param str resource_name: The name of the resource.
        :param ConfigurationApplyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigurationApplyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 machine_configuration: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 node: Optional[pulumi.Input[str]] = None,
                 talos_config: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigurationApplyArgs.__new__(ConfigurationApplyArgs)

            __props__.__dict__["config_patches"] = config_patches
            if endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'endpoint'")
            __props__.__dict__["endpoint"] = endpoint
            if machine_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'machine_configuration'")
            __props__.__dict__["machine_configuration"] = machine_configuration
            __props__.__dict__["mode"] = mode
            if node is None and not opts.urn:
                raise TypeError("Missing required property 'node'")
            __props__.__dict__["node"] = node
            if talos_config is None and not opts.urn:
                raise TypeError("Missing required property 'talos_config'")
            __props__.__dict__["talos_config"] = talos_config
        super(ConfigurationApply, __self__).__init__(
            'talos:machine/configurationApply:ConfigurationApply',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_patches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            endpoint: Optional[pulumi.Input[str]] = None,
            machine_configuration: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            node: Optional[pulumi.Input[str]] = None,
            talos_config: Optional[pulumi.Input[str]] = None) -> 'ConfigurationApply':
        """
        Get an existing ConfigurationApply resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_patches: config patches to apply to the generated config
        :param pulumi.Input[str] endpoint: machine endpoint
        :param pulumi.Input[str] machine_configuration: machine configuration
        :param pulumi.Input[str] mode: The mode to apply the configuration in.
        :param pulumi.Input[str] node: node to apply the config against
        :param pulumi.Input[str] talos_config: talos client configuration for authentication
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigurationApplyState.__new__(_ConfigurationApplyState)

        __props__.__dict__["config_patches"] = config_patches
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["machine_configuration"] = machine_configuration
        __props__.__dict__["mode"] = mode
        __props__.__dict__["node"] = node
        __props__.__dict__["talos_config"] = talos_config
        return ConfigurationApply(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configPatches")
    def config_patches(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        config patches to apply to the generated config
        """
        return pulumi.get(self, "config_patches")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        machine endpoint
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="machineConfiguration")
    def machine_configuration(self) -> pulumi.Output[str]:
        """
        machine configuration
        """
        return pulumi.get(self, "machine_configuration")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        """
        The mode to apply the configuration in.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def node(self) -> pulumi.Output[str]:
        """
        node to apply the config against
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> pulumi.Output[str]:
        """
        talos client configuration for authentication
        """
        return pulumi.get(self, "talos_config")

