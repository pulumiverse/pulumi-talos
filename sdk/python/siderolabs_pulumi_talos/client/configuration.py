# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ConfigurationArgs', 'Configuration']

@pulumi.input_type
class ConfigurationArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 machine_secrets: pulumi.Input[str],
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Configuration resource.
        :param pulumi.Input[str] cluster_name: The name of the cluster in the generated config
        :param pulumi.Input[str] machine_secrets: The machine secrets for the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] endpoints: endpoints to set in the generated config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodes: nodes to set in the generated config
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "machine_secrets", machine_secrets)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name of the cluster in the generated config
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="machineSecrets")
    def machine_secrets(self) -> pulumi.Input[str]:
        """
        The machine secrets for the cluster
        """
        return pulumi.get(self, "machine_secrets")

    @machine_secrets.setter
    def machine_secrets(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_secrets", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        endpoints to set in the generated config
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        nodes to set in the generated config
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nodes", value)


@pulumi.input_type
class _ConfigurationState:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 machine_secrets: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 talos_config: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Configuration resources.
        :param pulumi.Input[str] cluster_name: The name of the cluster in the generated config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] endpoints: endpoints to set in the generated config
        :param pulumi.Input[str] machine_secrets: The machine secrets for the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodes: nodes to set in the generated config
        :param pulumi.Input[str] talos_config: The generated talos config
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if machine_secrets is not None:
            pulumi.set(__self__, "machine_secrets", machine_secrets)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if talos_config is not None:
            pulumi.set(__self__, "talos_config", talos_config)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cluster in the generated config
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        endpoints to set in the generated config
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter(name="machineSecrets")
    def machine_secrets(self) -> Optional[pulumi.Input[str]]:
        """
        The machine secrets for the cluster
        """
        return pulumi.get(self, "machine_secrets")

    @machine_secrets.setter
    def machine_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_secrets", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        nodes to set in the generated config
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> Optional[pulumi.Input[str]]:
        """
        The generated talos config
        """
        return pulumi.get(self, "talos_config")

    @talos_config.setter
    def talos_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "talos_config", value)


class Configuration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 machine_secrets: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Generate client configuration for a Talos cluster

        ## Example Usage

        ```python
        import pulumi
        import siderolabs_pulumi_talos as talos

        machine_secrets = talos.machine.Secrets("machineSecrets")
        talosconfig = talos.client.Configuration("talosconfig",
            cluster_name="example-cluster",
            machine_secrets=machine_secrets.machine_secrets,
            endpoints=["10.5.0.2"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: The name of the cluster in the generated config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] endpoints: endpoints to set in the generated config
        :param pulumi.Input[str] machine_secrets: The machine secrets for the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodes: nodes to set in the generated config
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Generate client configuration for a Talos cluster

        ## Example Usage

        ```python
        import pulumi
        import siderolabs_pulumi_talos as talos

        machine_secrets = talos.machine.Secrets("machineSecrets")
        talosconfig = talos.client.Configuration("talosconfig",
            cluster_name="example-cluster",
            machine_secrets=machine_secrets.machine_secrets,
            endpoints=["10.5.0.2"])
        ```

        :param str resource_name: The name of the resource.
        :param ConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 machine_secrets: Optional[pulumi.Input[str]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigurationArgs.__new__(ConfigurationArgs)

            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["endpoints"] = endpoints
            if machine_secrets is None and not opts.urn:
                raise TypeError("Missing required property 'machine_secrets'")
            __props__.__dict__["machine_secrets"] = machine_secrets
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["talos_config"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["talosConfig"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Configuration, __self__).__init__(
            'talos:client/configuration:Configuration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            machine_secrets: Optional[pulumi.Input[str]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            talos_config: Optional[pulumi.Input[str]] = None) -> 'Configuration':
        """
        Get an existing Configuration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: The name of the cluster in the generated config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] endpoints: endpoints to set in the generated config
        :param pulumi.Input[str] machine_secrets: The machine secrets for the cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nodes: nodes to set in the generated config
        :param pulumi.Input[str] talos_config: The generated talos config
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigurationState.__new__(_ConfigurationState)

        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["endpoints"] = endpoints
        __props__.__dict__["machine_secrets"] = machine_secrets
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["talos_config"] = talos_config
        return Configuration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        The name of the cluster in the generated config
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        endpoints to set in the generated config
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="machineSecrets")
    def machine_secrets(self) -> pulumi.Output[str]:
        """
        The machine secrets for the cluster
        """
        return pulumi.get(self, "machine_secrets")

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        nodes to set in the generated config
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="talosConfig")
    def talos_config(self) -> pulumi.Output[str]:
        """
        The generated talos config
        """
        return pulumi.get(self, "talos_config")

